{"version":3,"sources":["Actions/GameActions.tsx","gameLogic.ts","Components/PlayingCard.tsx","Components/CardPile.tsx","Components/StartingBoard.tsx","Reducers/GameReducer.ts","Components/TopRow.tsx","App.tsx","index.tsx"],"names":["GameActionTypes","suits","values","numValues","initGameBoard","obj","returnDeck","deck","suit","i","length","push","value","numValue","discovered","column","pos","isTop","isInGlobal","getGlobalDeck","tempDeck","j","rnd","Math","floor","random","tmpCard","splice","startingDeck","globalDeck","makeStartingBoard","newGlobalDeck","counter","tmpCards","splitDeck","isValidStartingDeck","fromCard","toCard","console","log","isValidTopDeck","cardDimDiff","useStyles","makeStyles","card","display","width","cardWidth","height","borderRadius","padding","backgroundColor","border","cardbg","backgroundImage","backgroundRepeat","backgroundSize","cardtl","alignItems","cardbr","transform","cardValue","fontSize","cardSuit","red","color","black","bgImg","PlayingCard","React","memo","props","classes","dispatch","useDispatch","useDrop","accept","drop","useDrag","type","item","end","monitor","dropResult","getDropResult","undefined","payload","MoveCardTopRight","moveCardTopRight","isValidFromSplit","MoveCardSplitDeck","moveCardSplitDeck","MoveCardStartingCard","moveCardStartingCard","collect","isDragging","drag","turned","Grid","ref","el","canDrop","canDrag","container","direction","className","style","cursor","justify","CardPile","position","top","cards","map","idx","StartingBoard","initialState","topRightDeck","selectStartingDeck","state","selectSplitDeck","selectTopRightDeck","TopRow","useState","count","setCount","useSelector","onClick","UpdateSplitDeck","left","App","useEffect","gameBoard","InitializeGame","DndProvider","backend","HTML5Backend","spacing","margin","store","createStore","action","produce","draft","cardsToPush","newFromCard","tempSplitDeck","arr1d","concat","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f079fe1.chunk.js","sourcesContent":["import { Card, Deck } from '../Types'\r\n\r\nexport enum GameActionTypes {\r\n  InitializeGame = \"InitializeGame\",\r\n  MoveCardStartingCard = \"MoveCardStartingCard\",\r\n  MoveCardSplitDeck = \"MoveCardSplitDeck\",\r\n  MoveCardTopRight = \"MoveCardTopRight\",\r\n  UpdateSplitDeck = \"UpdateSplitDeck\"\r\n}\r\n\r\n/* -------- TYPES -------- */\r\nexport type GameState = {\r\n  startingDeck: Deck[]\r\n  splitDeck: Deck[]\r\n  topRightDeck: Deck[]\r\n}\r\ntype MoveCardPayload = {\r\n  fromCard: Card\r\n  toCard: Card\r\n}\r\ntype InitializeGameType = {\r\n  type: GameActionTypes.InitializeGame\r\n  payload: GameState\r\n}\r\ntype MoveCardStartingCard = {\r\n  type: GameActionTypes.MoveCardStartingCard\r\n  payload: MoveCardPayload\r\n}\r\n\r\ntype MoveCardSplitDeck = {\r\n  type: GameActionTypes.MoveCardSplitDeck\r\n  payload: MoveCardPayload\r\n}\r\n\r\ntype MoveCardTopRight = {\r\n  type: GameActionTypes.MoveCardTopRight\r\n  payload: MoveCardPayload\r\n}\r\n\r\ntype UpdateSplitDeck = {\r\n  type: GameActionTypes.UpdateSplitDeck\r\n}\r\n\r\n\r\nexport type GameActions =\r\n  MoveCardStartingCard |\r\n  InitializeGameType |\r\n  MoveCardSplitDeck |\r\n  UpdateSplitDeck |\r\n  MoveCardTopRight\r\n\r\n/* -------- ACTIONS -------- */\r\nexport const initializeGame = (payload: GameState) => ({\r\n  type: GameActionTypes.InitializeGame,\r\n  payload\r\n})\r\nexport const moveCardStartingCard = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardStartingCard,\r\n  payload\r\n})\r\n\r\nexport const moveCardSplitDeck = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardSplitDeck,\r\n  payload\r\n})\r\n\r\nexport const moveCardTopRight = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardTopRight,\r\n  payload\r\n})\r\n\r\nexport const updateSplitDeck = () => ({\r\n  type: GameActionTypes.UpdateSplitDeck\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","/* eslint-disable */\r\n\r\nimport {Card, Deck} from './Types'\r\n\r\n\r\nconst suits = [\"♠︎\", \"♥︎\", \"♣︎\", \"♦︎\"];\r\nconst values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\",];\r\nconst numValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,];\r\n\r\n\r\n\r\n\r\nexport function initGameBoard(): {splitDeck: Deck[], startingDeck: Deck[]} {\r\n  let obj = makeStartingBoard()\r\n  let newGlobalDeck: Deck[] = []\r\n  let counter = 0\r\n  while (obj.globalDeck.length) {\r\n    let tmpCards: Deck = []\r\n    if ((obj.globalDeck.length - 3) > 0) {\r\n      tmpCards = obj.globalDeck.splice(obj.globalDeck.length - 3, 3)\r\n    } else {\r\n      tmpCards = obj.globalDeck.splice(0, obj.globalDeck.length)\r\n    }\r\n    for(let i = 0; i < tmpCards.length; i++){\r\n      tmpCards[i].pos = i\r\n      tmpCards[i].column = counter\r\n    }\r\n    newGlobalDeck.push(tmpCards)\r\n    counter++\r\n  }\r\n  return {splitDeck: newGlobalDeck, startingDeck: obj.startingDeck}\r\n}\r\n\r\nexport function getTopRightDeck() : Deck[] {\r\n  return [\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 0, pos: -1, isTop: true, isInGlobal: false }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 1, pos: -1, isTop: true, isInGlobal: false }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 2, pos: -1, isTop: true, isInGlobal: false }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 3, pos: -1, isTop: true, isInGlobal: false }]\r\n  ]\r\n}\r\n\r\nfunction makeStartingBoard(): {startingDeck: Deck[],globalDeck: Deck} {\r\n  let returnDeck = []\r\n  let deck = getGlobalDeck()\r\n  for (let i = 0; i < 7; i++) {\r\n    let tempDeck = []\r\n    //tempDeck.push({ suit: '', value: '', numValue: -1, discovered: false, column: i, pos: -1, isTop: false, isInGlobal: false })\r\n    for (let j = 0; j <= i; j++) {\r\n      const rnd =Math.floor(Math.random() * deck.length)\r\n      let tmpCard = deck[rnd]\r\n      deck.splice(rnd, 1)\r\n      tmpCard.column = i\r\n      tmpCard.pos = j\r\n      tmpCard.isInGlobal = false\r\n      tmpCard.discovered = false\r\n      if (j === i) {\r\n        tmpCard.discovered = true\r\n      }\r\n      tempDeck.push(tmpCard)\r\n    }\r\n    returnDeck.push(tempDeck)\r\n  }\r\n  return {startingDeck: returnDeck, globalDeck: deck}\r\n}\r\nfunction getGlobalDeck(): Deck {\r\n  let returnDeck: Card[] = [];\r\n  for (let suit of suits) {\r\n    for (let i = 0; i < values.length; i++) {\r\n      returnDeck.push({ suit: suit, value: values[i], numValue: numValues[i], discovered: true, column: -1, pos: -1, isTop: false, isInGlobal: true });\r\n    }\r\n  }\r\n  return returnDeck\r\n}\r\n//CHECK MOVES\r\nexport function isValidStartingDeck(fromCard: Card, toCard: Card): boolean {\r\n  //props.card.suit === \"♥︎\" || props.card.suit === \"♦︎\" ? \"red\" : \"black\",\r\n  if(toCard.suit === '' && toCard.value === \"\" && toCard.pos === -1){\r\n    return true\r\n  }\r\n  else if(toCard.suit === \"♥︎\" || toCard.suit === \"♦︎\") {\r\n\r\n    if (fromCard.numValue + 1 === toCard.numValue && (fromCard.suit === \"♣︎\" || fromCard.suit === \"♠︎\")) {\r\n      return true\r\n    }\r\n  } else {\r\n\r\n    if (fromCard.numValue + 1 === toCard.numValue && (fromCard.suit === \"♥︎\" || fromCard.suit === \"♦︎\")) {\r\n      return true\r\n    }\r\n  }\r\n  console.log(\"INVALID MOVE\")\r\n  return false\r\n}\r\n\r\nexport function isValidTopDeck(fromCard: Card, toCard: Card):boolean {\r\n\r\n  if(toCard.suit === '' && toCard.value === '' && fromCard.value === \"A\"){\r\n    return true\r\n  } else {\r\n    console.log(\"First card must be A\")\r\n  }\r\n  if (fromCard.numValue === toCard.numValue + 1 && fromCard.suit === toCard.suit) {\r\n    return true\r\n  } else {\r\n    console.log(\"Selected card must be same suit and one value higher\")\r\n  }\r\n  console.log(\"INVALID MOVE\")\r\n  return false\r\n}\r\n\r\nexport function isValidFromSplit(fromCard: Card, toCard: Card):boolean{\r\n  if(toCard.isTop){\r\n    return isValidTopDeck(fromCard, toCard)\r\n  } else {\r\n    return isValidStartingDeck(fromCard, toCard)\r\n  }\r\n}\r\n\r\n\r\n\r\n","/* eslint-disable */\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { Deck, Card } from '../Types'\r\nimport { usePreview } from 'react-dnd-preview';\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { moveCardStartingCard, moveCardSplitDeck, moveCardTopRight } from \"../Actions/GameActions\";\r\nimport { isValidStartingDeck, isValidTopDeck, isValidFromSplit, } from \"../gameLogic\"\r\n\r\n\r\nconst cardDimDiff = 0.7191\r\nconst cardWidth = 100\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    display: \"flex\",\r\n    width: cardWidth + \"px\",\r\n    height: cardWidth / cardDimDiff + \"px\",\r\n    borderRadius: \"8px\",\r\n    padding: \"0px 4px 0px 4px\",\r\n    backgroundColor: \"white\",\r\n\r\n    border: \"3px solid black\",\r\n    //position: \"absolute\",\r\n\r\n  },\r\n  cardbg: {\r\n    display: \"flex\",\r\n    width: cardWidth - 6 + \"px\",\r\n    height: (cardWidth - 6) / cardDimDiff + \"px\",\r\n    borderRadius: \"8px\",\r\n    border: \"3px solid black\",\r\n\r\n\r\n\r\n    //Image styling\r\n    backgroundImage: `url(` + process.env.PUBLIC_URL + `/background2.png)`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\"\r\n  },\r\n\r\n  cardtl: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n\r\n  cardbr: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n    transform: `rotate(-180deg)`,\r\n  },\r\n  cardValue: {\r\n    fontSize: \"30px\",\r\n  },\r\n  cardSuit: {\r\n    fontSize: \"30px\",\r\n  },\r\n  red: {\r\n    color: \"red\",\r\n  },\r\n  black: {\r\n    color: \"black\",\r\n  },\r\n  bgImg: {\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\ninterface Props {\r\n  card: Card\r\n  turned: boolean\r\n  display: boolean\r\n  canDrop: boolean\r\n  canDrag: boolean\r\n}\r\n\r\n\r\nexport const PlayingCard = React.memo((props: Props) => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n\r\n  //console.log(\"Rendering\" + props.card.suit + \" \" + props.card.value)\r\n  function attachDragNDrop(el: any) {\r\n    props.canDrop ? drop(el) : () => { }\r\n    props.canDrag ? drag(el) : () => { }\r\n\r\n  }\r\n\r\n\r\n  const [{ }, drop] = useDrop({\r\n    accept: \"Card\",\r\n    drop: () => {\r\n      return { props: props.card }\r\n    },\r\n  })\r\n\r\n  const [{ isDragging }, drag, dragPreview] = useDrag({\r\n    type: \"Card\",\r\n    item: () => {\r\n      return { card: props.card }\r\n    },\r\n    end: (item, monitor) => {\r\n      const dropResult: any = monitor.getDropResult();\r\n      if (item && dropResult) {\r\n        let fromCard: Card = item.card\r\n        let toCard: Card = dropResult.props\r\n        if (fromCard !== undefined && toCard !== undefined && (fromCard.pos !== toCard.pos || fromCard.column !== toCard.column)) {\r\n          let payload = { fromCard: item.card, toCard: dropResult.props }\r\n          if (toCard.isTop && !fromCard.isInGlobal && isValidTopDeck(fromCard, toCard)) {\r\n            console.log(`You dropped ${fromCard.value}, ${fromCard.suit} into topRightDeck ${toCard.value}, ${toCard.suit}`)\r\n            dispatch(moveCardTopRight(payload))\r\n          } else if (fromCard.isInGlobal && isValidFromSplit(fromCard, toCard)) {\r\n            console.log(`You dropped ${fromCard.value}, ${fromCard.suit} from splitDeck into ${toCard.value}, ${toCard.suit}`);\r\n            dispatch(moveCardSplitDeck(payload))\r\n          } else if (!toCard.isTop && isValidStartingDeck(fromCard, toCard)) {\r\n            console.log(`You dropped ${fromCard.value}, ${fromCard.suit} into ${toCard.value}, ${toCard.suit}`);\r\n            dispatch(moveCardStartingCard(payload))\r\n          }\r\n        }\r\n        else {\r\n          console.log(\"Something is undefined in useDrag or Cant drop a card on is self\")\r\n        }\r\n      }\r\n    },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging()\r\n    })\r\n  })\r\n  /*\r\n    useEffect(() => {\r\n      dragPreview(getEmptyImage(), { captureDraggingState: false });\r\n    }, [])\r\n  */\r\n\r\n  if (props.turned === false || props.card.suit === '') {\r\n    return (\r\n      <>\r\n        <Grid\r\n          ref={attachDragNDrop}\r\n          container\r\n          direction=\"row\"\r\n          className={classes.card}\r\n          style={{\r\n            color: props.card.suit === \"♥︎\" || props.card.suit === \"♦︎\" ? \"red\" : \"black\",\r\n            border: props.card.suit === '' ? \"2px solid rgba(0, 0, 0, 0.3)\" : \"3px solid rgba(0, 0, 0)\",\r\n            display: !props.display /*|| isDragging*/ ? \"none\" : \"\",\r\n            cursor: props.canDrag ? \"pointer\" : undefined,\r\n\r\n          }}\r\n\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            className={classes.cardtl}\r\n          >\r\n            <Grid item className={classes.cardValue}>\r\n              {props.card.value}\r\n            </Grid>\r\n            <Grid item className={classes.cardSuit}>\r\n              {props.card.suit}\r\n            </Grid>\r\n          </Grid>\r\n\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            className={classes.cardbr}\r\n          >\r\n            <Grid item className={classes.cardValue}>\r\n              {props.card.value}\r\n            </Grid>\r\n            <Grid item className={classes.cardSuit}>\r\n              {props.card.suit}\r\n            </Grid>\r\n          </Grid>\r\n\r\n\r\n        </Grid>\r\n\r\n\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Grid container style={{\r\n        }}>\r\n          <div className={classes.cardbg} />\r\n        </Grid>\r\n\r\n      </>\r\n    );\r\n  }\r\n})\r\n\r\n//False = Rerender\r\n//True = Not rerender","/* eslint-disable */\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React, { useCallback, useContext, useState } from \"react\";\r\nimport { Deck, Card } from '../Types'\r\nimport { PlayingCard } from \"./PlayingCard\";\r\n\r\n\r\ninterface Props {\r\n  cards: Card[];\r\n  column: number\r\n}\r\nconst distBetweenCards = 43\r\n\r\nexport const CardPile = (props: Props): any => {\r\n  //console.log(\"Re render pile\")\r\n  return (\r\n    <>\r\n      <Grid item style={{ position: \"static\", top: \"0px\" }}>\r\n        <PlayingCard\r\n          card={{ suit: '', value: '', numValue: -1, discovered: false, column: props.column, pos: -1, isTop: false, isInGlobal: false }}\r\n          canDrag={false}\r\n          canDrop={true}\r\n          display={true}\r\n          turned={false}\r\n        />\r\n      </Grid>\r\n      {props.cards.length > 0 ? props.cards.map((card, idx) => {\r\n        return (\r\n          <Grid item key={idx} style={{ position: \"absolute\", top: card.pos === 0 ? \"0px\" : card.pos * distBetweenCards + \"px\" }}>\r\n            <PlayingCard\r\n              card={card}\r\n              turned={!card.discovered}\r\n              display={true}\r\n              canDrop={idx === props.cards.length - 1}\r\n              canDrag={card.discovered}\r\n            />\r\n          </Grid>\r\n        )\r\n      }) : <> </>}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n","/* eslint-disable */\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React, { } from \"react\";\r\nimport { Deck, Card } from '../Types'\r\nimport { CardPile } from \"./CardPile\";\r\n\r\n\r\ninterface Props {\r\n  startingDeck: Deck[]\r\n}\r\n\r\nexport const StartingBoard = (props: Props) => {\r\n\r\n  return (\r\n    <Grid container direction=\"row\" alignItems=\"flex-start\" justify=\"space-between\"  >\r\n      {props.startingDeck.map((cards, idx) => {\r\n        return (\r\n          <Grid item key={idx} style={{ position: \"relative\" }}>\r\n            <CardPile cards={cards} column={idx} />\r\n          </Grid>\r\n        )\r\n      })}\r\n    </Grid>\r\n\r\n  )\r\n}\r\n\r\n","import { GameActions, GameActionTypes, GameState } from \"../Actions/GameActions\"\r\nimport {  Card, Deck } from \"../Types\"\r\nimport produce from \"immer\";\r\n\r\n\r\n\r\nexport const initialState: GameState = {\r\n  startingDeck: [],\r\n  splitDeck: [],\r\n  topRightDeck: []\r\n}\r\n\r\n\r\n\r\nexport const GameReducer = (state = initialState, action: GameActions): GameState => {\r\n  switch(action.type){\r\n    case GameActionTypes.MoveCardStartingCard:\r\n      return produce(state, draft => {\r\n        let fromCard = action.payload.fromCard\r\n        let toCard = action.payload.toCard\r\n        let cardsToPush = draft.startingDeck[fromCard.column].splice(fromCard.pos, draft.startingDeck[fromCard.column].length - fromCard.pos)\r\n        for(let card of cardsToPush){\r\n          if(draft.startingDeck[toCard.column].length === 0){\r\n            card.pos = 0\r\n          } else {\r\n            card.pos = draft.startingDeck[toCard.column].length\r\n          }\r\n          card.column = toCard.column\r\n          draft.startingDeck[toCard.column].push(card)\r\n        }\r\n        if(draft.startingDeck[fromCard.column].length > 0){\r\n          draft.startingDeck[fromCard.column][fromCard.pos - 1].discovered = true\r\n        }\r\n\r\n      })\r\n    case GameActionTypes.MoveCardSplitDeck:\r\n      return produce(state, draft => {\r\n        let toCard = action.payload.toCard\r\n        let fromCard: Card = draft.splitDeck[action.payload.fromCard.column].splice(action.payload.fromCard.pos)[0]\r\n\r\n        fromCard.column = toCard.column\r\n        fromCard.pos = toCard.pos + 1\r\n\r\n        if(toCard.isTop){\r\n          fromCard.isTop = true\r\n          fromCard.isInGlobal = false\r\n          draft.topRightDeck[toCard.column].push(fromCard)\r\n        } else {\r\n          fromCard.isInGlobal = false\r\n          draft.startingDeck[toCard.column].push(fromCard)\r\n        }\r\n      })\r\n   \r\n    case GameActionTypes.MoveCardTopRight:\r\n      let fromCard = action.payload.fromCard\r\n      if(state.startingDeck[fromCard.column].length - 1 === fromCard.pos){\r\n        return produce(state, draft => {\r\n          let newFromCard: Card = draft.startingDeck[fromCard.column].splice(fromCard.pos)[0]\r\n          if(draft.startingDeck[fromCard.column].length > 0){\r\n            draft.startingDeck[fromCard.column][fromCard.pos - 1].discovered = true\r\n          }\r\n          newFromCard.isTop = true\r\n          newFromCard.column = action.payload.toCard.column\r\n          draft.topRightDeck[action.payload.toCard.column].push(newFromCard)\r\n        })\r\n      }else {\r\n        return state\r\n      }\r\n      \r\n    \r\n    case GameActionTypes.UpdateSplitDeck:\r\n      console.log(\"Resetting splitdeck\")\r\n      return produce(state, draft => {\r\n        //CAN MAYBE REFINE THIS CODE???\r\n        let tempSplitDeck = [...draft.splitDeck]\r\n        let arr1d: Deck = []\r\n        for (let i = 0; i < tempSplitDeck.length; i++) {\r\n          arr1d = tempSplitDeck[i].concat(arr1d)\r\n        }\r\n        tempSplitDeck = []\r\n        let counter = 0\r\n        while (arr1d.length) {\r\n          let tmpCards: Deck = []\r\n          if ((arr1d.length - 3) > 0) {\r\n            tmpCards = arr1d.splice(arr1d.length - 3, 3)\r\n          } else {\r\n            tmpCards = arr1d.splice(0, arr1d.length)\r\n          }\r\n          for (let i = 0; i < tmpCards.length; i++) {\r\n            tmpCards[i].pos = i\r\n            tmpCards[i].column = counter\r\n          }\r\n          tempSplitDeck.push(tmpCards)\r\n          counter++\r\n        }\r\n        draft.splitDeck = tempSplitDeck\r\n      })\r\n\r\n    \r\n    case GameActionTypes.InitializeGame:\r\n      console.log(\"Initializing Game\")\r\n      return produce(state, draft => {\r\n        draft.startingDeck = action.payload.startingDeck\r\n        draft.splitDeck = action.payload.splitDeck\r\n        draft.topRightDeck = action.payload.topRightDeck\r\n      })\r\n      \r\n    default:\r\n      return state\r\n\r\n  }\r\n}\r\n\r\n\r\nexport type RootState = GameState\r\nexport const selectStartingDeck = (state: RootState): Deck[] => state.startingDeck\r\nexport const selectSplitDeck = (state: RootState): Deck[] => state.splitDeck\r\nexport const selectTopRightDeck = (state: RootState): Deck[] => state.topRightDeck\r\n\r\n\r\n\r\n","/* eslint-disable */\r\nimport { Grid } from \"@material-ui/core\"\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { updateSplitDeck } from \"../Actions/GameActions\"\r\nimport { RootState, selectSplitDeck } from \"../Reducers/GameReducer\"\r\n\r\nimport { Deck, Card } from \"../Types\"\r\nimport { PlayingCard } from \"./PlayingCard\"\r\n\r\ninterface Props {\r\n  topRightDeck: Deck[]\r\n  splitDeck: Deck[]\r\n}\r\n\r\nexport function TopRow(props: Props) {\r\n  const [count, setCount] = useState<number>(-1)\r\n  const splitDeck = useSelector<RootState, Deck[]>(selectSplitDeck);\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"space-between\">\r\n      <Grid\r\n        item\r\n        onClick={() => {\r\n          if (count >= props.splitDeck.length - 1) {\r\n            dispatch(updateSplitDeck())\r\n            setCount(-1)\r\n          } else {\r\n            setCount(count + 1)\r\n          }\r\n          console.log(count)\r\n\r\n        }}\r\n      >\r\n        <PlayingCard\r\n          card={{ suit: \"bg\", value: \"\", numValue: -1, discovered: false, column: -1, pos: -1, isTop: false, isInGlobal: false, }}\r\n          turned={true}\r\n          display={true}\r\n          canDrop={false}\r\n          canDrag={false}\r\n        />\r\n      </Grid>\r\n      <Grid item style={{ width: \"100px\" }}>\r\n        <Grid container direction=\"row\" style={{ position: \"relative\" }}>\r\n          {count > -1 ? splitDeck[count].map((card, idx) => {\r\n            return (\r\n              <Grid\r\n                item\r\n                key={idx}\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: idx * 50 + \"px\",\r\n                }}\r\n              >\r\n                <PlayingCard\r\n                  card={card}\r\n                  turned={false}\r\n                  display={true}\r\n                  canDrop={false}\r\n                  canDrag={idx === splitDeck[count].length - 1 ? true : false}\r\n                />\r\n              </Grid>\r\n            )\r\n          }) : ''}\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item style={{ width: \"100px\" }}></Grid>\r\n      {props.topRightDeck.map((card, idx) => {\r\n        return (\r\n          <Grid item key={idx}>\r\n            <PlayingCard\r\n              card={card[card.length - 1]}\r\n              turned={false}\r\n              display={true}\r\n              canDrop={true}\r\n              canDrag={false}\r\n            />\r\n          </Grid>\r\n        )\r\n      })}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default TopRow\r\n","/* eslint-disable */\r\nimport React, { useCallback, useEffect, useState, useContext } from \"react\"\r\nimport \"./CSS/App.css\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { StartingBoard } from \"./Components/StartingBoard\"\r\nimport { DndProvider } from \"react-dnd\"\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\"\r\nimport TopRow from \"./Components/TopRow\"\r\nimport {\r\n  initGameBoard,\r\n  getTopRightDeck,\r\n  isValidStartingDeck,\r\n  isValidTopDeck,\r\n  isValidFromSplit,\r\n} from \"./gameLogic\"\r\nimport { Card, Deck } from \"./Types\"\r\nimport { PlayingCardPreview } from './Components/PlayingCardPreview'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { initializeGame } from './Actions/GameActions'\r\nimport { RootState, selectStartingDeck, selectSplitDeck, selectTopRightDeck } from \"./Reducers/GameReducer\"\r\n\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch()\r\n  const startingDeck = useSelector<RootState, Deck[]>(selectStartingDeck);\r\n  const splitDeck = useSelector<RootState, Deck[]>(selectSplitDeck);\r\n  const topRightDeck = useSelector<RootState, Deck[]>(selectTopRightDeck);\r\n\r\n\r\n  useEffect(() => {\r\n    let gameBoard = initGameBoard()\r\n    dispatch(initializeGame({ startingDeck: gameBoard.startingDeck, splitDeck: gameBoard.splitDeck, topRightDeck: getTopRightDeck() }))\r\n    console.log(\"Board initialized\")\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <DndProvider backend={HTML5Backend}>\r\n        {/*<PlayingCardPreview startingDeck={startingDeck} />*/}\r\n\r\n        <Grid container spacing={8} direction=\"column\" style={{ margin: \"20px 18vw 20px 18vw\" }}>\r\n\r\n          <Grid item>\r\n            <TopRow topRightDeck={topRightDeck} splitDeck={splitDeck} />\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <StartingBoard startingDeck={startingDeck} />\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </DndProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { createStore } from 'redux'\r\nimport { GameReducer } from './Reducers/GameReducer'\r\nimport { Provider } from 'react-redux'\r\n//STORE\r\nconst store = createStore(GameReducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}