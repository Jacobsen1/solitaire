{"version":3,"sources":["Actions/GameActions.tsx","Reducers/GameReducer.ts","Components/PlayingCard.tsx","Components/CardPile.tsx","Components/StartingBoard.tsx","Components/TopRow.tsx","gameLogic.ts","Components/PlayingCardPreview.tsx","App.tsx","index.tsx"],"names":["GameActionTypes","initialState","startingDeck","splitDeck","topRightDeck","selectStartingDeck","state","selectSplitDeck","selectTopRightDeck","cardDimDiff","useStyles","makeStyles","card","display","width","cardWidth","height","borderRadius","padding","backgroundColor","border","cardbg","backgroundImage","backgroundRepeat","backgroundSize","cardtl","alignItems","cardbr","transform","cardValue","fontSize","cardSuit","red","color","black","bgImg","PlayingCard","React","memo","props","classes","dispatch","useDispatch","useSelector","useState","useDrop","accept","drop","useDrag","type","item","end","monitor","dropResult","getDropResult","fromCard","toCard","undefined","pos","column","console","log","payload","isTop","isInGlobal","MoveCardTopRight","moveCardTopRight","MoveCardSplitDeck","moveCardSplitDeck","MoveCardStartingCard","moveCardStartingCard","collect","isDragging","drag","dragPreview","useEffect","getEmptyImage","captureDraggingState","turned","suit","Grid","ref","el","canDrop","canDrag","id","numValue","container","direction","className","style","cursor","justify","value","CardPile","position","top","discovered","cards","length","map","idx","overflow","zIndex","StartingBoard","TopRow","count","setCount","onClick","UpdateSplitDeck","left","suits","values","numValues","initGameBoard","obj","returnDeck","deck","i","push","getGlobalDeck","tempDeck","j","rnd","Math","floor","random","tmpCard","splice","globalDeck","makeStartingBoard","newGlobalDeck","counter","tmpCards","PlayingCardPreview","draggedCard","setDraggedCard","memoizedPreview","useMemo","createPreviewCards","generator","itemType","App","gameBoard","InitializeGame","DndProvider","backend","HTML5Backend","spacing","margin","store","createStore","action","produce","draft","cardsToPush","newFromCard","tempSplitDeck","arr1d","concat","ToggleDraggedCards","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ca0b485.chunk.js","sourcesContent":["import { Card, Deck } from '../Types'\r\n\r\nexport enum GameActionTypes {\r\n  InitializeGame = \"InitializeGame\",\r\n  MoveCardStartingCard = \"MoveCardStartingCard\",\r\n  MoveCardSplitDeck = \"MoveCardSplitDeck\",\r\n  MoveCardTopRight = \"MoveCardTopRight\",\r\n  UpdateSplitDeck = \"UpdateSplitDeck\",\r\n  ToggleDraggedCards = \"ToggleDraggedCards\"\r\n}\r\n\r\n/* -------- TYPES -------- */\r\nexport type GameState = {\r\n  startingDeck: Deck[]\r\n  splitDeck: Deck[]\r\n  topRightDeck: Deck[]\r\n}\r\ntype MoveCardPayload = {\r\n  fromCard: Card\r\n  toCard: Card\r\n}\r\ntype InitializeGameType = {\r\n  type: GameActionTypes.InitializeGame\r\n  payload: GameState\r\n}\r\ntype MoveCardStartingCard = {\r\n  type: GameActionTypes.MoveCardStartingCard\r\n  payload: MoveCardPayload\r\n}\r\ntype MoveCardSplitDeck = {\r\n  type: GameActionTypes.MoveCardSplitDeck\r\n  payload: MoveCardPayload\r\n}\r\ntype MoveCardTopRight = {\r\n  type: GameActionTypes.MoveCardTopRight\r\n  payload: MoveCardPayload\r\n}\r\ntype UpdateSplitDeck = {\r\n  type: GameActionTypes.UpdateSplitDeck\r\n}\r\ntype ToggleDraggedCards = {\r\n  type: GameActionTypes.ToggleDraggedCards\r\n  payload: Card\r\n}\r\n\r\nexport type GameActions =\r\n  MoveCardStartingCard |\r\n  InitializeGameType |\r\n  MoveCardSplitDeck |\r\n  UpdateSplitDeck |\r\n  MoveCardTopRight |\r\n  ToggleDraggedCards\r\n\r\n/* -------- ACTIONS -------- */\r\nexport const initializeGame = (payload: GameState) => ({\r\n  type: GameActionTypes.InitializeGame,\r\n  payload\r\n})\r\nexport const moveCardStartingCard = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardStartingCard,\r\n  payload\r\n})\r\n\r\nexport const moveCardSplitDeck = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardSplitDeck,\r\n  payload\r\n})\r\n\r\nexport const moveCardTopRight = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardTopRight,\r\n  payload\r\n})\r\n\r\nexport const updateSplitDeck = () => ({\r\n  type: GameActionTypes.UpdateSplitDeck\r\n})\r\n\r\nexport const toggleDraggedCards = (payload: Card) => ({\r\n  type: GameActionTypes.ToggleDraggedCards,\r\n  payload\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","import { GameActions, GameActionTypes, GameState } from \"../Actions/GameActions\"\r\nimport {  Card, Deck } from \"../Types\"\r\nimport produce from \"immer\";\r\n\r\n\r\n\r\nexport const initialState: GameState = {\r\n  startingDeck: [],\r\n  splitDeck: [],\r\n  topRightDeck: []\r\n}\r\n\r\n\r\n\r\nexport const GameReducer = (state = initialState, action: GameActions): GameState => {\r\n  switch(action.type){\r\n    case GameActionTypes.MoveCardStartingCard:\r\n      return produce(state, draft => {\r\n        let fromCard = action.payload.fromCard\r\n        let toCard = action.payload.toCard\r\n        let cardsToPush = draft.startingDeck[fromCard.column].splice(fromCard.pos, draft.startingDeck[fromCard.column].length - fromCard.pos)\r\n        for(let card of cardsToPush){\r\n          if(draft.startingDeck[toCard.column].length === 0){\r\n            card.pos = 0\r\n          } else {\r\n            card.pos = draft.startingDeck[toCard.column].length\r\n          }\r\n          card.column = toCard.column\r\n          draft.startingDeck[toCard.column].push(card)\r\n        }\r\n        if(draft.startingDeck[fromCard.column].length > 0){\r\n          draft.startingDeck[fromCard.column][fromCard.pos - 1].discovered = true\r\n        }\r\n\r\n      })\r\n    case GameActionTypes.MoveCardSplitDeck:\r\n      return produce(state, draft => {\r\n        let toCard = action.payload.toCard\r\n        let fromCard: Card = draft.splitDeck[action.payload.fromCard.column].splice(action.payload.fromCard.pos)[0]\r\n\r\n        fromCard.column = toCard.column\r\n        fromCard.pos = toCard.pos + 1\r\n\r\n        if(toCard.isTop){\r\n          fromCard.isTop = true\r\n          fromCard.isInGlobal = false\r\n          draft.topRightDeck[toCard.column].push(fromCard)\r\n        } else {\r\n          fromCard.isInGlobal = false\r\n          draft.startingDeck[toCard.column].push(fromCard)\r\n        }\r\n      })\r\n   \r\n    case GameActionTypes.MoveCardTopRight:\r\n      let fromCard = action.payload.fromCard\r\n      if(state.startingDeck[fromCard.column].length - 1 === fromCard.pos){\r\n        return produce(state, draft => {\r\n          let newFromCard: Card = draft.startingDeck[fromCard.column].splice(fromCard.pos)[0]\r\n          if(draft.startingDeck[fromCard.column].length > 0){\r\n            draft.startingDeck[fromCard.column][fromCard.pos - 1].discovered = true\r\n          }\r\n          newFromCard.isTop = true\r\n          newFromCard.column = action.payload.toCard.column\r\n          draft.topRightDeck[action.payload.toCard.column].push(newFromCard)\r\n        })\r\n      }else {\r\n        return state\r\n      }\r\n    case GameActionTypes.UpdateSplitDeck:\r\n      console.log(\"Resetting splitdeck\")\r\n      return produce(state, draft => {\r\n        //CAN MAYBE REFINE THIS CODE???\r\n        let tempSplitDeck = [...draft.splitDeck]\r\n        let arr1d: Deck = []\r\n        for (let i = 0; i < tempSplitDeck.length; i++) {\r\n          arr1d = tempSplitDeck[i].concat(arr1d)\r\n        }\r\n        tempSplitDeck = []\r\n        let counter = 0\r\n        while (arr1d.length) {\r\n          let tmpCards: Deck = []\r\n          if ((arr1d.length - 3) > 0) {\r\n            tmpCards = arr1d.splice(arr1d.length - 3, 3)\r\n          } else {\r\n            tmpCards = arr1d.splice(0, arr1d.length)\r\n          }\r\n          for (let i = 0; i < tmpCards.length; i++) {\r\n            tmpCards[i].pos = i\r\n            tmpCards[i].column = counter\r\n          }\r\n          tempSplitDeck.push(tmpCards)\r\n          counter++\r\n        }\r\n        draft.splitDeck = tempSplitDeck\r\n      })\r\n    case GameActionTypes.InitializeGame:\r\n      console.log(\"Initializing Game\")\r\n      return produce(state, draft => {\r\n        draft.startingDeck = action.payload.startingDeck\r\n        draft.splitDeck = action.payload.splitDeck\r\n        draft.topRightDeck = action.payload.topRightDeck\r\n      })\r\n    case GameActionTypes.ToggleDraggedCards:\r\n      return produce(state, draft => {\r\n        for(let i = action.payload.pos; i < draft.startingDeck[action.payload.column].length; i++){\r\n          draft.startingDeck[action.payload.column][i].display = !draft.startingDeck[action.payload.column][i].display\r\n        }\r\n      })\r\n    \r\n    default:\r\n      return state\r\n\r\n  }\r\n}\r\n\r\n\r\nexport type RootState = GameState\r\nexport const selectStartingDeck = (state: RootState): Deck[] => state.startingDeck\r\nexport const selectSplitDeck = (state: RootState): Deck[] => state.splitDeck\r\nexport const selectTopRightDeck = (state: RootState): Deck[] => state.topRightDeck\r\n\r\n\r\n\r\n","/* eslint-disable */\r\n\r\nimport React, { createElement, useEffect, useLayoutEffect, useRef, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { DragPreviewImage, useDrag, useDrop } from 'react-dnd';\r\nimport { Deck, Card } from '../Types'\r\nimport { usePreview } from 'react-dnd-preview';\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { moveCardStartingCard, moveCardSplitDeck, moveCardTopRight, toggleDraggedCards } from \"../Actions/GameActions\";\r\nimport { isValidStartingDeck, isValidTopDeck, isValidFromSplit, } from \"../gameLogic\"\r\nimport * as htmlToImage from 'html-to-image';\r\nimport { selectStartingDeck } from \"../Reducers/GameReducer\";\r\n\r\nconst cardDimDiff = 0.7191\r\nconst cardWidth = 100\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    display: \"flex\",\r\n    width: cardWidth + \"px\",\r\n    height: cardWidth / cardDimDiff + \"px\",\r\n    borderRadius: \"8px\",\r\n    padding: \"0px 4px 0px 4px\",\r\n    backgroundColor: \"white\",\r\n    border: \"3px solid black\",\r\n    //position: \"absolute\",\r\n\r\n  },\r\n  cardbg: {\r\n    display: \"flex\",\r\n    width: cardWidth - 6 + \"px\",\r\n    height: (cardWidth - 6) / cardDimDiff + \"px\",\r\n    borderRadius: \"8px\",\r\n    border: \"3px solid black\",\r\n\r\n\r\n\r\n    //Image styling\r\n    backgroundImage: `url(` + process.env.PUBLIC_URL + `/background2.png)`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\"\r\n  },\r\n\r\n  cardtl: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n\r\n  cardbr: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n    transform: `rotate(-180deg)`,\r\n  },\r\n  cardValue: {\r\n    fontSize: \"30px\",\r\n  },\r\n  cardSuit: {\r\n    fontSize: \"30px\",\r\n  },\r\n  red: {\r\n    color: \"red\",\r\n  },\r\n  black: {\r\n    color: \"black\",\r\n  },\r\n  bgImg: {\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\ninterface Props {\r\n  card: Card\r\n  turned: boolean\r\n  display: boolean\r\n  canDrop: boolean\r\n  canDrag: boolean\r\n}\r\n\r\nconst getClassNameh = (n: HTMLCollectionOf<Element>) => {\r\n  let newNode = document.createElement(\"div\")\r\n  newNode.className = \"MuiGrid-root MuiGrid-item\"\r\n\r\n  for (let i = 0; i < n.length; i++) {\r\n    let node = n.item(i)?.cloneNode(true)\r\n    if (node) {\r\n      newNode.appendChild(node)\r\n    }\r\n    return newNode\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const PlayingCard = React.memo((props: Props) => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const startingDeck = useSelector(selectStartingDeck)\r\n\r\n  const [img, setImg] = useState('')\r\n  const [node, setNode] = useState<HTMLElement | null>(null)\r\n  /*\r\n   useEffect(() => {\r\n    \r\n     if (props.card.discovered) {\r\n       //let nodes = document.getElementsByClassName(\"pile\" + props.card.column)\r\n       //let node = getClassNameh(nodes)\r\n       let node = document.getElementById(props.card.suit + props.card.numValue)\r\n       console.log(node)\r\n       //getClassName(document.getElementsByClassName(\"pile\" + props.card.column))\r\n       if (node) {\r\n         htmlToImage.toJpeg(node).then((dataUrl) => {\r\n           setImg(dataUrl)\r\n         })\r\n           .catch(err => {\r\n             console.log(err)\r\n           })\r\n       }\r\n     }\r\n     \r\n   }, [props])\r\n */\r\n\r\n  //console.log(\"Rendering\" + props.card.suit + \" \" + props.card.value)\r\n  function attachDragNDrop(el: any) {\r\n    props.canDrop ? drop(el) : () => { }\r\n    props.canDrag ? drag(el) : () => { }\r\n  }\r\n\r\n\r\n\r\n  const [{ }, drop] = useDrop({\r\n    accept: \"Card\",\r\n    drop: () => {\r\n      return { props: props.card }\r\n    },\r\n  })\r\n\r\n  const [{ isDragging }, drag, dragPreview] = useDrag({\r\n    type: \"Card\",\r\n    item: () => {\r\n      /*\r\n      let startingDeckCp = [...startingDeck]\r\n      let draggedCards: Deck = []\r\n      if (startingDeck[props.card.column]) {\r\n        draggedCards = startingDeckCp[props.card.column].slice(props.card.pos, startingDeckCp[props.card.column].length)\r\n        console.log(draggedCards)\r\n      }\r\n      let newNode = document.createElement(\"div\")\r\n \r\n      for (let i = 0; i < draggedCards.length; i++) {\r\n        console.log(draggedCards[i].suit + draggedCards[i].value)\r\n        let tmpNode = document.getElementById(draggedCards[i].suit + draggedCards[i].numValue)\r\n        console.log(tmpNode)\r\n        if (tmpNode) {\r\n          newNode.appendChild(tmpNode)\r\n        }\r\n      }\r\n      htmlToImage.toPng(newNode).then((dataUrl) => {\r\n        setImg(dataUrl)\r\n      })\r\n        .catch(err => {\r\n          console.log(err)\r\n        })\r\n \r\n      console.log(newNode)\r\n*/\r\n      return { card: props.card }\r\n    },\r\n    end: (item, monitor) => {\r\n      const dropResult: any = monitor.getDropResult();\r\n      if (item && dropResult) {\r\n        let fromCard: Card = item.card\r\n        let toCard: Card = dropResult.props\r\n        if (fromCard !== undefined && toCard !== undefined && (fromCard.pos !== toCard.pos || fromCard.column !== toCard.column)) {\r\n          let payload = { fromCard: item.card, toCard: dropResult.props }\r\n          if (toCard.isTop && !fromCard.isInGlobal /*&& isValidTopDeck(fromCard, toCard)*/) {\r\n            dispatch(moveCardTopRight(payload))\r\n          } else if (fromCard.isInGlobal /*&& isValidFromSplit(fromCard, toCard)*/) {\r\n            dispatch(moveCardSplitDeck(payload))\r\n          } else if (!toCard.isTop/*&& isValidStartingDeck(fromCard, toCard)*/) {\r\n            dispatch(moveCardStartingCard(payload))\r\n          }\r\n        }\r\n        else {\r\n          console.log(\"Something is undefined in useDrag or Cant drop a card on is self\")\r\n        }\r\n      }\r\n    },\r\n    collect(monitor) {\r\n      return { isDragging: monitor.isDragging() }\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    dragPreview(getEmptyImage(), { captureDraggingState: false });\r\n  }, [])\r\n\r\n\r\n  if (props.turned === false || props.card.suit === '') {\r\n    return (\r\n      <>\r\n        {/*<DragPreviewImage connect={dragPreview} src={img} />*/}\r\n        <Grid\r\n          ref={attachDragNDrop}\r\n          id={props.card.suit + props.card.numValue}\r\n          container\r\n          direction=\"row\"\r\n          className={classes.card}\r\n          style={{\r\n            color: props.card.suit === \"♥︎\" || props.card.suit === \"♦︎\" ? \"red\" : \"black\",\r\n            border: props.card.suit === '' ? \"2px solid rgba(0, 0, 0, 0.3)\" : \"3px solid rgba(0, 0, 0)\",\r\n            display: !props.display /*|| isDragging*/ ? \"none\" : \"\",\r\n            cursor: props.canDrag ? \"pointer\" : undefined,\r\n          }}\r\n\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            className={classes.cardtl}\r\n          >\r\n            <Grid item className={classes.cardValue}>\r\n              {props.card.value}\r\n            </Grid>\r\n            <Grid item className={classes.cardSuit}>\r\n              {props.card.suit}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            className={classes.cardbr}\r\n          >\r\n            <Grid item className={classes.cardValue}>\r\n              {props.card.value}\r\n            </Grid>\r\n            <Grid item className={classes.cardSuit}>\r\n              {props.card.suit}\r\n            </Grid>\r\n          </Grid>\r\n\r\n\r\n        </Grid>\r\n      </>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <Grid container style={{\r\n        }}>\r\n          <div className={classes.cardbg} />\r\n        </Grid>\r\n\r\n      </>\r\n    );\r\n  }\r\n})\r\n\r\n//False = Rerender\r\n//True = Not rerender","/* eslint-disable */\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React, { useCallback, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Deck, Card } from '../Types'\r\nimport { PlayingCard } from \"./PlayingCard\";\r\n\r\n\r\ninterface Props {\r\n  cards: Card[];\r\n  column: number\r\n}\r\nconst distBetweenCards = 43\r\n\r\n\r\nexport const CardPile = (props: Props): any => {\r\n  //console.log(\"Re render pile\")\r\n  return (\r\n    <>\r\n      <Grid item style={{ position: \"static\", top: \"0px\" }}>\r\n        <PlayingCard\r\n          card={{ suit: '', value: '', numValue: -1, discovered: false, column: props.column, pos: -1, isTop: false, isInGlobal: false, display: true }}\r\n          canDrag={false}\r\n          canDrop={true}\r\n          display={true}\r\n          turned={false}\r\n        />\r\n      </Grid>\r\n      {props.cards.length > 0 ? props.cards.map((card, idx) => {\r\n        return (\r\n          <Grid item className={card.discovered ? \"pile\" + card.column : ''} key={idx} style={{ position: \"absolute\", top: card.pos === 0 ? \"0px\" : card.pos * distBetweenCards + \"px\", overflow: \"hidden\", zIndex: 40 }}>\r\n            <PlayingCard\r\n              card={card}\r\n              turned={!card.discovered}\r\n              display={true}\r\n              canDrop={idx === props.cards.length - 1}\r\n              canDrag={card.discovered}\r\n            />\r\n          </Grid>\r\n        )\r\n      }) : <> </>}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n","/* eslint-disable */\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React, { } from \"react\";\r\nimport { Deck, Card } from '../Types'\r\nimport { CardPile } from \"./CardPile\";\r\n\r\n\r\ninterface Props {\r\n  startingDeck: Deck[]\r\n}\r\n\r\nexport const StartingBoard = (props: Props) => {\r\n\r\n  return (\r\n    <Grid container direction=\"row\" alignItems=\"flex-start\" justify=\"space-between\"  >\r\n      {props.startingDeck.map((cards, idx) => {\r\n        return (\r\n          <Grid item key={idx} style={{ position: \"relative\" }}>\r\n            <CardPile cards={cards} column={idx} />\r\n          </Grid>\r\n        )\r\n      })}\r\n    </Grid>\r\n\r\n  )\r\n}\r\n\r\n","/* eslint-disable */\r\nimport { Grid } from \"@material-ui/core\"\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { updateSplitDeck } from \"../Actions/GameActions\"\r\nimport { RootState, selectSplitDeck } from \"../Reducers/GameReducer\"\r\n\r\nimport { Deck, Card } from \"../Types\"\r\nimport { PlayingCard } from \"./PlayingCard\"\r\n\r\ninterface Props {\r\n  topRightDeck: Deck[]\r\n  splitDeck: Deck[]\r\n}\r\n\r\nexport function TopRow(props: Props) {\r\n  const [count, setCount] = useState<number>(-1)\r\n  const splitDeck = useSelector<RootState, Deck[]>(selectSplitDeck);\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"space-between\">\r\n      <Grid\r\n        item\r\n        onClick={() => {\r\n          if (count >= props.splitDeck.length - 1) {\r\n            dispatch(updateSplitDeck())\r\n            setCount(-1)\r\n          } else {\r\n            setCount(count + 1)\r\n          }\r\n          console.log(count)\r\n\r\n        }}\r\n      >\r\n        <PlayingCard\r\n          card={{ suit: \"bg\", value: \"\", numValue: -1, discovered: false, column: -1, pos: -1, isTop: false, isInGlobal: false, display: true }}\r\n          turned={true}\r\n          display={true}\r\n          canDrop={false}\r\n          canDrag={false}\r\n        />\r\n      </Grid>\r\n      <Grid item style={{ width: \"100px\" }}>\r\n        <Grid container direction=\"row\" style={{ position: \"relative\" }}>\r\n          {count > -1 ? splitDeck[count].map((card, idx) => {\r\n            return (\r\n              <Grid\r\n                item\r\n                key={idx}\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: idx * 50 + \"px\",\r\n                }}\r\n              >\r\n                <PlayingCard\r\n                  card={card}\r\n                  turned={false}\r\n                  display={true}\r\n                  canDrop={false}\r\n                  canDrag={idx === splitDeck[count].length - 1 ? true : false}\r\n                />\r\n              </Grid>\r\n            )\r\n          }) : ''}\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item style={{ width: \"100px\" }}></Grid>\r\n      {props.topRightDeck.map((card, idx) => {\r\n        return (\r\n          <Grid item key={idx}>\r\n            <PlayingCard\r\n              card={card[card.length - 1]}\r\n              turned={false}\r\n              display={true}\r\n              canDrop={true}\r\n              canDrag={false}\r\n            />\r\n          </Grid>\r\n        )\r\n      })}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default TopRow\r\n","/* eslint-disable */\r\n\r\nimport {Card, Deck} from './Types'\r\n\r\n\r\nconst suits = [\"♠︎\", \"♥︎\", \"♣︎\", \"♦︎\"];\r\nconst values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\",];\r\nconst numValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,];\r\n\r\n\r\n\r\n\r\nexport function initGameBoard(): {splitDeck: Deck[], startingDeck: Deck[]} {\r\n  let obj = makeStartingBoard()\r\n  let newGlobalDeck: Deck[] = []\r\n  let counter = 0\r\n  while (obj.globalDeck.length) {\r\n    let tmpCards: Deck = []\r\n    if ((obj.globalDeck.length - 3) > 0) {\r\n      tmpCards = obj.globalDeck.splice(obj.globalDeck.length - 3, 3)\r\n    } else {\r\n      tmpCards = obj.globalDeck.splice(0, obj.globalDeck.length)\r\n    }\r\n    for(let i = 0; i < tmpCards.length; i++){\r\n      tmpCards[i].pos = i\r\n      tmpCards[i].column = counter\r\n    }\r\n    newGlobalDeck.push(tmpCards)\r\n    counter++\r\n  }\r\n  return {splitDeck: newGlobalDeck, startingDeck: obj.startingDeck}\r\n}\r\n\r\nexport function getTopRightDeck() : Deck[] {\r\n  return [\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 0, pos: -1, isTop: true, isInGlobal: false, display: true }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 1, pos: -1, isTop: true, isInGlobal: false, display: true }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 2, pos: -1, isTop: true, isInGlobal: false, display: true }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 3, pos: -1, isTop: true, isInGlobal: false, display: true }]\r\n  ]\r\n}\r\n\r\nfunction makeStartingBoard(): {startingDeck: Deck[],globalDeck: Deck} {\r\n  let returnDeck = []\r\n  let deck = getGlobalDeck()\r\n  for (let i = 0; i < 7; i++) {\r\n    let tempDeck = []\r\n    //tempDeck.push({ suit: '', value: '', numValue: -1, discovered: false, column: i, pos: -1, isTop: false, isInGlobal: false })\r\n    for (let j = 0; j <= i; j++) {\r\n      const rnd =Math.floor(Math.random() * deck.length)\r\n      let tmpCard = deck[rnd]\r\n      deck.splice(rnd, 1)\r\n      tmpCard.column = i\r\n      tmpCard.pos = j\r\n      tmpCard.isInGlobal = false\r\n      tmpCard.discovered = false\r\n      if (j === i) {\r\n        tmpCard.discovered = true\r\n      }\r\n      tempDeck.push(tmpCard)\r\n    }\r\n    returnDeck.push(tempDeck)\r\n  }\r\n  return {startingDeck: returnDeck, globalDeck: deck}\r\n}\r\nfunction getGlobalDeck(): Deck {\r\n  let returnDeck: Card[] = [];\r\n  for (let suit of suits) {\r\n    for (let i = 0; i < values.length; i++) {\r\n      returnDeck.push({ suit: suit, value: values[i], numValue: numValues[i], discovered: true, column: -1, pos: -1, isTop: false, isInGlobal: true, display: true });\r\n    }\r\n  }\r\n  return returnDeck\r\n}\r\n//CHECK MOVES\r\nexport function isValidStartingDeck(fromCard: Card, toCard: Card): boolean {\r\n  //props.card.suit === \"♥︎\" || props.card.suit === \"♦︎\" ? \"red\" : \"black\",\r\n  if(toCard.suit === '' && toCard.value === \"\" && toCard.pos === -1){\r\n    return true\r\n  }\r\n  else if(toCard.suit === \"♥︎\" || toCard.suit === \"♦︎\") {\r\n\r\n    if (fromCard.numValue + 1 === toCard.numValue && (fromCard.suit === \"♣︎\" || fromCard.suit === \"♠︎\")) {\r\n      return true\r\n    }\r\n  } else {\r\n\r\n    if (fromCard.numValue + 1 === toCard.numValue && (fromCard.suit === \"♥︎\" || fromCard.suit === \"♦︎\")) {\r\n      return true\r\n    }\r\n  }\r\n  console.log(\"INVALID MOVE\")\r\n  return false\r\n}\r\n\r\nexport function isValidTopDeck(fromCard: Card, toCard: Card):boolean {\r\n\r\n  if(toCard.suit === '' && toCard.value === '' && fromCard.value === \"A\"){\r\n    return true\r\n  } else {\r\n    console.log(\"First card must be A\")\r\n  }\r\n  if (fromCard.numValue === toCard.numValue + 1 && fromCard.suit === toCard.suit) {\r\n    return true\r\n  } else {\r\n    console.log(\"Selected card must be same suit and one value higher\")\r\n  }\r\n  console.log(\"INVALID MOVE\")\r\n  return false\r\n}\r\n\r\nexport function isValidFromSplit(fromCard: Card, toCard: Card):boolean{\r\n  if(toCard.isTop){\r\n    return isValidTopDeck(fromCard, toCard)\r\n  } else {\r\n    return isValidStartingDeck(fromCard, toCard)\r\n  }\r\n}\r\n\r\n\r\n\r\n","import { Grid } from '@material-ui/core'\r\nimport React, { useMemo, useState } from 'react'\r\nimport { Card, Deck } from '../Types'\r\nimport { PlayingCard } from './PlayingCard'\r\nimport CSS from \"csstype\";\r\n\r\nimport { Preview } from 'react-dnd-preview';\r\n\r\ninterface Props {\r\n  startingDeck: Deck[]\r\n}\r\ninterface PreviewObject {\r\n  itemType: string;\r\n  item: {\r\n    type: string;\r\n    card: Card;\r\n  };\r\n  style: CSS.Properties;\r\n}\r\n\r\nconst distBetweenCards = 43\r\n\r\nconst createPreviewCards = (draggedCard: Card | null, cards: Deck[]): Deck => {\r\n  if (draggedCard) {\r\n\r\n    let tmpPile = [...cards[draggedCard.column]]\r\n    return tmpPile.splice(draggedCard.pos, cards[draggedCard.column].length - draggedCard.pos)\r\n  }\r\n  return [];\r\n};\r\n\r\n\r\nexport const PlayingCardPreview = React.memo((props: Props) => {\r\n\r\n  const [draggedCard, setDraggedCard] = useState<Card | null>(null);\r\n  const memoizedPreview = useMemo(() => createPreviewCards(draggedCard, props.startingDeck), [draggedCard, props.startingDeck]);\r\n\r\n  const generatePreview = ({ itemType, item, style }: PreviewObject) => {\r\n    if (item && item.card) {\r\n      setDraggedCard(item.card)\r\n    }\r\n    if (memoizedPreview.length > 0) {\r\n      return (\r\n        <>\r\n          {memoizedPreview.map((card, idx) => {\r\n            return (\r\n              <Grid item key={idx} style={{ ...style, position: \"absolute\", top: idx * distBetweenCards + \"px\", zIndex: 50 }}>\r\n                <PlayingCard\r\n                  card={card}\r\n                  turned={!card.discovered}\r\n                  display={true}\r\n                  canDrop={idx === memoizedPreview.length - 1}\r\n                  canDrag={card.discovered}\r\n                />\r\n              </Grid>\r\n            )\r\n\r\n          })}</>\r\n\r\n      )\r\n\r\n    } else {\r\n      return (<></>)\r\n    }\r\n  }\r\n  return <Preview generator={generatePreview} />\r\n\r\n\r\n})","/* eslint-disable */\r\nimport React, { useCallback, useEffect, useState, useContext } from \"react\"\r\nimport \"./CSS/App.css\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { StartingBoard } from \"./Components/StartingBoard\"\r\nimport { DndProvider } from \"react-dnd\"\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\"\r\nimport TopRow from \"./Components/TopRow\"\r\nimport {\r\n  initGameBoard,\r\n  getTopRightDeck,\r\n  isValidStartingDeck,\r\n  isValidTopDeck,\r\n  isValidFromSplit,\r\n} from \"./gameLogic\"\r\nimport { Card, Deck } from \"./Types\"\r\nimport { PlayingCardPreview } from './Components/PlayingCardPreview'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { initializeGame } from './Actions/GameActions'\r\nimport { RootState, selectStartingDeck, selectSplitDeck, selectTopRightDeck } from \"./Reducers/GameReducer\"\r\n\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch()\r\n  const startingDeck = useSelector<RootState, Deck[]>(selectStartingDeck);\r\n  const splitDeck = useSelector<RootState, Deck[]>(selectSplitDeck);\r\n  const topRightDeck = useSelector<RootState, Deck[]>(selectTopRightDeck);\r\n\r\n\r\n  useEffect(() => {\r\n    let gameBoard = initGameBoard()\r\n    dispatch(initializeGame({ startingDeck: gameBoard.startingDeck, splitDeck: gameBoard.splitDeck, topRightDeck: getTopRightDeck() }))\r\n    console.log(\"Board initialized\")\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <DndProvider backend={HTML5Backend}>\r\n        <PlayingCardPreview startingDeck={startingDeck} />\r\n\r\n        <Grid container spacing={8} direction=\"column\" style={{ margin: \"20px 18vw 20px 18vw\" }}>\r\n\r\n          <Grid item>\r\n            <TopRow topRightDeck={topRightDeck} splitDeck={splitDeck} />\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <StartingBoard startingDeck={startingDeck} />\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </DndProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { createStore } from 'redux'\r\nimport { GameReducer } from './Reducers/GameReducer'\r\nimport { Provider } from 'react-redux'\r\n//STORE\r\nconst store = createStore(GameReducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}