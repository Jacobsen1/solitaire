{"version":3,"sources":["Actions/GameActions.tsx","Components/PlayingCard.tsx","Components/CardPile.tsx","Components/StartingBoard.tsx","Reducers/GameReducer.ts","Components/TopRow.tsx","gameLogic.ts","Components/PlayingCardPreview.tsx","App.tsx","index.tsx"],"names":["GameActionTypes","toggleDraggedCards","payload","type","ToggleDraggedCards","cardDimDiff","useStyles","makeStyles","card","display","width","cardWidth","height","borderRadius","padding","backgroundColor","border","cardbg","backgroundImage","backgroundRepeat","backgroundSize","cardtl","alignItems","cardbr","transform","cardValue","fontSize","cardSuit","red","color","black","bgImg","PlayingCard","React","memo","props","classes","dispatch","useDispatch","useDrop","accept","drop","useDrag","item","end","monitor","dropResult","getDropResult","fromCard","toCard","undefined","pos","column","console","log","isTop","isInGlobal","MoveCardTopRight","moveCardTopRight","MoveCardSplitDeck","moveCardSplitDeck","MoveCardStartingCard","moveCardStartingCard","collect","isDragging","getItem","didDrop","drag","dragPreview","useEffect","getEmptyImage","captureDraggingState","turned","suit","Grid","ref","el","canDrop","canDrag","id","numValue","container","direction","className","style","cursor","justify","value","CardPile","position","top","discovered","cards","length","map","idx","overflow","zIndex","StartingBoard","startingDeck","initialState","splitDeck","topRightDeck","draggedCards","selectStartingDeck","state","selectSplitDeck","selectTopRightDeck","selectDraggedCards","TopRow","useState","count","setCount","useSelector","onClick","UpdateSplitDeck","left","suits","values","numValues","initGameBoard","obj","returnDeck","deck","i","push","getGlobalDeck","tempDeck","j","rnd","Math","floor","random","tmpCard","splice","globalDeck","makeStartingBoard","newGlobalDeck","counter","tmpCards","PlayingCardPreview","memoizedPreview","useMemo","generator","itemType","App","gameBoard","InitializeGame","DndProvider","backend","HTML5Backend","spacing","margin","store","createStore","action","produce","draft","cardsToPush","slice","newFromCard","tempSplitDeck","arr1d","concat","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3050ce1.chunk.js","sourcesContent":["import { Card, Deck } from '../Types'\r\n\r\nexport enum GameActionTypes {\r\n  InitializeGame = \"InitializeGame\",\r\n  MoveCardStartingCard = \"MoveCardStartingCard\",\r\n  MoveCardSplitDeck = \"MoveCardSplitDeck\",\r\n  MoveCardTopRight = \"MoveCardTopRight\",\r\n  UpdateSplitDeck = \"UpdateSplitDeck\",\r\n  ToggleDraggedCards = \"ToggleDraggedCards\"\r\n}\r\n\r\n/* -------- TYPES -------- */\r\nexport type GameState = {\r\n  startingDeck: Deck[]\r\n  splitDeck: Deck[]\r\n  topRightDeck: Deck[]\r\n  draggedCards: Deck\r\n}\r\ntype MoveCardPayload = {\r\n  fromCard: Card\r\n  toCard: Card\r\n}\r\ntype InitializeGameType = {\r\n  type: GameActionTypes.InitializeGame\r\n  payload: GameState\r\n}\r\ntype MoveCardStartingCard = {\r\n  type: GameActionTypes.MoveCardStartingCard\r\n  payload: MoveCardPayload\r\n}\r\ntype MoveCardSplitDeck = {\r\n  type: GameActionTypes.MoveCardSplitDeck\r\n  payload: MoveCardPayload\r\n}\r\ntype MoveCardTopRight = {\r\n  type: GameActionTypes.MoveCardTopRight\r\n  payload: MoveCardPayload\r\n}\r\ntype UpdateSplitDeck = {\r\n  type: GameActionTypes.UpdateSplitDeck\r\n}\r\ntype ToggleDraggedCards = {\r\n  type: GameActionTypes.ToggleDraggedCards\r\n  payload: { card: Card, display: boolean }\r\n}\r\n\r\nexport type GameActions =\r\n  MoveCardStartingCard |\r\n  InitializeGameType |\r\n  MoveCardSplitDeck |\r\n  UpdateSplitDeck |\r\n  MoveCardTopRight |\r\n  ToggleDraggedCards\r\n\r\n/* -------- ACTIONS -------- */\r\nexport const initializeGame = (payload: GameState) => ({\r\n  type: GameActionTypes.InitializeGame,\r\n  payload\r\n})\r\nexport const moveCardStartingCard = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardStartingCard,\r\n  payload\r\n})\r\n\r\nexport const moveCardSplitDeck = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardSplitDeck,\r\n  payload\r\n})\r\n\r\nexport const moveCardTopRight = (payload: MoveCardPayload) => ({\r\n  type: GameActionTypes.MoveCardTopRight,\r\n  payload\r\n})\r\n\r\nexport const updateSplitDeck = () => ({\r\n  type: GameActionTypes.UpdateSplitDeck\r\n})\r\n\r\nexport const toggleDraggedCards = (payload: { card: Card, display: boolean }) => ({\r\n  type: GameActionTypes.ToggleDraggedCards,\r\n  payload\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","/* eslint-disable */\r\n\r\nimport React, { useEffect, } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { Deck, Card } from '../Types'\r\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { moveCardStartingCard, moveCardSplitDeck, moveCardTopRight, toggleDraggedCards } from \"../Actions/GameActions\";\r\nimport { selectStartingDeck } from \"../Reducers/GameReducer\";\r\n\r\n\r\nconst cardDimDiff = 0.7191\r\nconst cardWidth = 100\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    display: \"flex\",\r\n    width: cardWidth + \"px\",\r\n    height: cardWidth / cardDimDiff + \"px\",\r\n    borderRadius: \"8px\",\r\n    padding: \"0px 4px 0px 4px\",\r\n    backgroundColor: \"white\",\r\n    border: \"3px solid black\",\r\n    //position: \"absolute\",\r\n\r\n  },\r\n  cardbg: {\r\n    display: \"flex\",\r\n    width: cardWidth - 6 + \"px\",\r\n    height: (cardWidth - 6) / cardDimDiff + \"px\",\r\n    borderRadius: \"8px\",\r\n    border: \"3px solid black\",\r\n\r\n\r\n\r\n    //Image styling\r\n    backgroundImage: `url(` + process.env.PUBLIC_URL + `/background2.png)`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\"\r\n  },\r\n\r\n  cardtl: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n\r\n  cardbr: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n    transform: `rotate(-180deg)`,\r\n  },\r\n  cardValue: {\r\n    fontSize: \"30px\",\r\n  },\r\n  cardSuit: {\r\n    fontSize: \"30px\",\r\n  },\r\n  red: {\r\n    color: \"red\",\r\n  },\r\n  black: {\r\n    color: \"black\",\r\n  },\r\n  bgImg: {\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\ninterface Props {\r\n  card: Card\r\n  turned: boolean\r\n  canDrop: boolean\r\n  canDrag: boolean\r\n}\r\n\r\n\r\nexport const PlayingCard = React.memo((props: Props) => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n\r\n  function attachDragNDrop(el: any) {\r\n    props.canDrop ? drop(el) : () => { }\r\n    props.canDrag ? drag(el) : () => { }\r\n  }\r\n\r\n\r\n  const [{ }, drop] = useDrop({\r\n    accept: \"Card\",\r\n    drop: () => {\r\n      return { props: props.card }\r\n    },\r\n  })\r\n\r\n  const [{ isDragging, item, didDrop }, drag, dragPreview] = useDrag({\r\n    type: \"Card\",\r\n    item: () => {\r\n\r\n      //dispatch(toggleDraggedCards({ card: props.card, display: false }))\r\n      return { card: props.card }\r\n    },\r\n    end: (item, monitor) => {\r\n      const dropResult: any = monitor.getDropResult();\r\n      if (item && dropResult) {\r\n        let fromCard: Card = item.card\r\n        let toCard: Card = dropResult.props\r\n        if (fromCard !== undefined && toCard !== undefined && (fromCard.pos !== toCard.pos || fromCard.column !== toCard.column)) {\r\n          let payload = { fromCard: item.card, toCard: dropResult.props }\r\n          if (toCard.isTop && !fromCard.isInGlobal /*&& isValidTopDeck(fromCard, toCard)*/) {\r\n            dispatch(moveCardTopRight(payload))\r\n          } else if (fromCard.isInGlobal /*&& isValidFromSplit(fromCard, toCard)*/) {\r\n            dispatch(moveCardSplitDeck(payload))\r\n          } else if (!toCard.isTop/*&& isValidStartingDeck(fromCard, toCard)*/) {\r\n            dispatch(moveCardStartingCard(payload))\r\n          }\r\n        }\r\n        else {\r\n          dispatch(toggleDraggedCards({ card: props.card, display: true }))\r\n          console.log(\"Something is undefined in useDrag or Cant drop a card on is self\")\r\n        }\r\n      } else {\r\n        dispatch(toggleDraggedCards({ card: props.card, display: true }))\r\n\r\n      }\r\n    },\r\n    collect(monitor) {\r\n      return { isDragging: monitor.isDragging(), item: monitor.getItem(), didDrop: monitor.didDrop() }\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    dragPreview(getEmptyImage(), { captureDraggingState: false });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (item && item.card && isDragging) {\r\n      dispatch(toggleDraggedCards({ card: item.card, display: !isDragging }));\r\n    }\r\n  }, [isDragging, item, dispatch]);\r\n\r\n\r\n  if (props.turned === false || props.card.suit === '') {\r\n    return (\r\n      <>\r\n        <Grid\r\n          ref={attachDragNDrop}\r\n          id={props.card.suit + props.card.numValue}\r\n          container\r\n          direction=\"row\"\r\n          className={classes.card}\r\n          style={{\r\n            color: props.card.suit === \"♥︎\" || props.card.suit === \"♦︎\" ? \"red\" : \"black\",\r\n            border: props.card.suit === '' ? \"2px solid rgba(0, 0, 0, 0.3)\" : \"3px solid rgba(0, 0, 0)\",\r\n            //display: !props.card.display ? \"none\" : undefined,\r\n            cursor: props.canDrag ? \"pointer\" : undefined,\r\n          }}\r\n\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            className={classes.cardtl}\r\n          >\r\n            <Grid item className={classes.cardValue}>\r\n              {props.card.value}\r\n            </Grid>\r\n            <Grid item className={classes.cardSuit}>\r\n              {props.card.suit}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            className={classes.cardbr}\r\n          >\r\n            <Grid item className={classes.cardValue}>\r\n              {props.card.value}\r\n            </Grid>\r\n            <Grid item className={classes.cardSuit}>\r\n              {props.card.suit}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n    )\r\n  } else {\r\n    return (\r\n      <Grid container>\r\n        <div className={classes.cardbg} />\r\n      </Grid>\r\n    );\r\n  }\r\n})\r\n","/* eslint-disable */\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React, { useCallback, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Deck, Card } from '../Types'\r\nimport { PlayingCard } from \"./PlayingCard\";\r\n\r\n\r\ninterface Props {\r\n  cards: Card[];\r\n  column: number\r\n}\r\nconst distBetweenCards = 43\r\n\r\n\r\nexport const CardPile = (props: Props): any => {\r\n  //console.log(\"Re render pile\")\r\n  return (\r\n    <>\r\n      <Grid item style={{ position: \"static\", top: \"0px\" }}>\r\n        <PlayingCard\r\n          card={{ suit: '', value: '', numValue: -1, discovered: false, column: props.column, pos: -1, isTop: false, isInGlobal: false, display: true }}\r\n          canDrag={false}\r\n          canDrop={true}\r\n          turned={false}\r\n        />\r\n      </Grid>\r\n      {props.cards.length > 0 ? props.cards.map((card, idx) => {\r\n        return (\r\n          <Grid item className={card.discovered ? \"pile\" + card.column : ''} key={idx} style={{ position: \"absolute\", top: card.pos === 0 ? \"0px\" : card.pos * distBetweenCards + \"px\", overflow: \"hidden\", zIndex: 40 }}>\r\n            <PlayingCard\r\n              card={card}\r\n              turned={!card.discovered}\r\n              canDrop={idx === props.cards.length - 1}\r\n              canDrag={card.discovered}\r\n            />\r\n          </Grid>\r\n        )\r\n      }) : <> </>}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n","/* eslint-disable */\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React, { } from \"react\";\r\nimport { Deck, Card } from '../Types'\r\nimport { CardPile } from \"./CardPile\";\r\n\r\n\r\ninterface Props {\r\n  startingDeck: Deck[]\r\n}\r\n\r\nexport const StartingBoard = (props: Props) => {\r\n\r\n  return (\r\n    <Grid container direction=\"row\" alignItems=\"flex-start\" justify=\"space-between\"  >\r\n      {props.startingDeck.map((cards, idx) => {\r\n        return (\r\n          <Grid item key={idx} style={{ position: \"relative\" }}>\r\n            <CardPile cards={cards} column={idx} />\r\n          </Grid>\r\n        )\r\n      })}\r\n    </Grid>\r\n\r\n  )\r\n}\r\n\r\n","import { GameActions, GameActionTypes, GameState } from \"../Actions/GameActions\"\r\nimport {  Card, Deck } from \"../Types\"\r\nimport produce from \"immer\";\r\n\r\n\r\n\r\nexport const initialState: GameState = {\r\n  startingDeck: [],\r\n  splitDeck: [],\r\n  topRightDeck: [],\r\n  draggedCards: []\r\n}\r\n\r\n\r\n\r\nexport const GameReducer = (state = initialState, action: GameActions): GameState => {\r\n  switch(action.type){\r\n    case GameActionTypes.MoveCardStartingCard:\r\n      return produce(state, draft => {\r\n        let fromCard = action.payload.fromCard\r\n        let toCard = action.payload.toCard\r\n        //let cardsToPush = draft.startingDeck[fromCard.column].splice(fromCard.pos, draft.startingDeck[fromCard.column].length - fromCard.pos)\r\n        let cardsToPush = draft.draggedCards.slice(0)\r\n        console.log(cardsToPush)\r\n\r\n        for(let card of cardsToPush){\r\n          if(draft.startingDeck[toCard.column].length === 0){\r\n            card.pos = 0\r\n          } else {\r\n            card.pos = draft.startingDeck[toCard.column].length\r\n          }\r\n          card.column = toCard.column\r\n          draft.startingDeck[toCard.column].push(card)\r\n        }\r\n        if(draft.startingDeck[fromCard.column].length > 0){\r\n          draft.startingDeck[fromCard.column][fromCard.pos - 1].discovered = true\r\n        }\r\n\r\n      })\r\n    case GameActionTypes.MoveCardSplitDeck:\r\n      return produce(state, draft => {\r\n        let toCard = action.payload.toCard\r\n        let fromCard: Card = draft.splitDeck[action.payload.fromCard.column].splice(action.payload.fromCard.pos)[0]\r\n\r\n        fromCard.column = toCard.column\r\n        fromCard.pos = toCard.pos + 1\r\n\r\n        if(toCard.isTop){\r\n          fromCard.isTop = true\r\n          fromCard.isInGlobal = false\r\n          draft.topRightDeck[toCard.column].push(fromCard)\r\n        } else {\r\n          fromCard.isInGlobal = false\r\n          draft.startingDeck[toCard.column].push(fromCard)\r\n        }\r\n      })\r\n   \r\n    case GameActionTypes.MoveCardTopRight:\r\n      let fromCard = action.payload.fromCard\r\n      if(state.startingDeck[fromCard.column].length - 1 === fromCard.pos){\r\n        return produce(state, draft => {\r\n          let newFromCard: Card = draft.startingDeck[fromCard.column].splice(fromCard.pos)[0]\r\n          if(draft.startingDeck[fromCard.column].length > 0){\r\n            draft.startingDeck[fromCard.column][fromCard.pos - 1].discovered = true\r\n          }\r\n          newFromCard.isTop = true\r\n          newFromCard.column = action.payload.toCard.column\r\n          draft.topRightDeck[action.payload.toCard.column].push(newFromCard)\r\n        })\r\n      }else {\r\n        return state\r\n      }\r\n    case GameActionTypes.UpdateSplitDeck:\r\n      console.log(\"Resetting splitdeck\")\r\n      return produce(state, draft => {\r\n        //CAN MAYBE REFINE THIS CODE???\r\n        let tempSplitDeck = [...draft.splitDeck]\r\n        let arr1d: Deck = []\r\n        for (let i = 0; i < tempSplitDeck.length; i++) {\r\n          arr1d = tempSplitDeck[i].concat(arr1d)\r\n        }\r\n        tempSplitDeck = []\r\n        let counter = 0\r\n        while (arr1d.length) {\r\n          let tmpCards: Deck = []\r\n          if ((arr1d.length - 3) > 0) {\r\n            tmpCards = arr1d.splice(arr1d.length - 3, 3)\r\n          } else {\r\n            tmpCards = arr1d.splice(0, arr1d.length)\r\n          }\r\n          for (let i = 0; i < tmpCards.length; i++) {\r\n            tmpCards[i].pos = i\r\n            tmpCards[i].column = counter\r\n          }\r\n          tempSplitDeck.push(tmpCards)\r\n          counter++\r\n        }\r\n        draft.splitDeck = tempSplitDeck\r\n      })\r\n    case GameActionTypes.InitializeGame:\r\n      console.log(\"Initializing Game\")\r\n      return produce(state, draft => {\r\n        draft.startingDeck = action.payload.startingDeck\r\n        draft.splitDeck = action.payload.splitDeck\r\n        draft.topRightDeck = action.payload.topRightDeck\r\n      })\r\n    case GameActionTypes.ToggleDraggedCards:\r\n      return produce(state, draft => {\r\n        if(!action.payload.display){\r\n          let draggedCards = draft.startingDeck[action.payload.card.column].splice(action.payload.card.pos)\r\n          draft.draggedCards = draggedCards\r\n        } else {\r\n          let draggedCards = draft.draggedCards\r\n          draggedCards.map(card => draft.startingDeck[action.payload.card.column].push(card))\r\n          draft.draggedCards = []\r\n        }\r\n      })\r\n    \r\n    default:\r\n      return state\r\n\r\n  }\r\n}\r\n\r\n\r\nexport type RootState = GameState\r\nexport const selectStartingDeck = (state: RootState): Deck[] => state.startingDeck\r\nexport const selectSplitDeck = (state: RootState): Deck[] => state.splitDeck\r\nexport const selectTopRightDeck = (state: RootState): Deck[] => state.topRightDeck\r\nexport const selectDraggedCards = (state: RootState): Deck => state.draggedCards\r\n\r\n\r\n\r\n","/* eslint-disable */\r\nimport { Grid } from \"@material-ui/core\"\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { updateSplitDeck } from \"../Actions/GameActions\"\r\nimport { RootState, selectSplitDeck } from \"../Reducers/GameReducer\"\r\n\r\nimport { Deck, Card } from \"../Types\"\r\nimport { PlayingCard } from \"./PlayingCard\"\r\n\r\ninterface Props {\r\n  topRightDeck: Deck[]\r\n  splitDeck: Deck[]\r\n}\r\n\r\nexport function TopRow(props: Props) {\r\n  const [count, setCount] = useState<number>(-1)\r\n  const splitDeck = useSelector<RootState, Deck[]>(selectSplitDeck);\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"space-between\">\r\n      <Grid\r\n        item\r\n        onClick={() => {\r\n          if (count >= props.splitDeck.length - 1) {\r\n            dispatch(updateSplitDeck())\r\n            setCount(-1)\r\n          } else {\r\n            setCount(count + 1)\r\n          }\r\n          console.log(count)\r\n\r\n        }}\r\n      >\r\n        <PlayingCard\r\n          card={{ suit: \"bg\", value: \"\", numValue: -1, discovered: false, column: -1, pos: -1, isTop: false, isInGlobal: false, display: true }}\r\n          turned={true}\r\n          canDrop={false}\r\n          canDrag={false}\r\n        />\r\n      </Grid>\r\n      <Grid item style={{ width: \"100px\" }}>\r\n        <Grid container direction=\"row\" style={{ position: \"relative\" }}>\r\n          {count > -1 ? splitDeck[count].map((card, idx) => {\r\n            return (\r\n              <Grid\r\n                item\r\n                key={idx}\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: idx * 50 + \"px\",\r\n                }}\r\n              >\r\n                <PlayingCard\r\n                  card={card}\r\n                  turned={false}\r\n                  canDrop={false}\r\n                  canDrag={idx === splitDeck[count].length - 1 ? true : false}\r\n                />\r\n              </Grid>\r\n            )\r\n          }) : ''}\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item style={{ width: \"100px\" }}></Grid>\r\n      {props.topRightDeck.map((card, idx) => {\r\n        return (\r\n          <Grid item key={idx}>\r\n            <PlayingCard\r\n              card={card[card.length - 1]}\r\n              turned={false}\r\n              canDrop={true}\r\n              canDrag={false}\r\n            />\r\n          </Grid>\r\n        )\r\n      })}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default TopRow\r\n","/* eslint-disable */\r\n\r\nimport {Card, Deck} from './Types'\r\n\r\n\r\nconst suits = [\"♠︎\", \"♥︎\", \"♣︎\", \"♦︎\"];\r\nconst values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\",];\r\nconst numValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,];\r\n\r\n\r\n\r\n\r\nexport function initGameBoard(): {splitDeck: Deck[], startingDeck: Deck[]} {\r\n  let obj = makeStartingBoard()\r\n  let newGlobalDeck: Deck[] = []\r\n  let counter = 0\r\n  while (obj.globalDeck.length) {\r\n    let tmpCards: Deck = []\r\n    if ((obj.globalDeck.length - 3) > 0) {\r\n      tmpCards = obj.globalDeck.splice(obj.globalDeck.length - 3, 3)\r\n    } else {\r\n      tmpCards = obj.globalDeck.splice(0, obj.globalDeck.length)\r\n    }\r\n    for(let i = 0; i < tmpCards.length; i++){\r\n      tmpCards[i].pos = i\r\n      tmpCards[i].column = counter\r\n    }\r\n    newGlobalDeck.push(tmpCards)\r\n    counter++\r\n  }\r\n  return {splitDeck: newGlobalDeck, startingDeck: obj.startingDeck}\r\n}\r\n\r\nexport function getTopRightDeck() : Deck[] {\r\n  return [\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 0, pos: -1, isTop: true, isInGlobal: false, display: true }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 1, pos: -1, isTop: true, isInGlobal: false, display: true }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 2, pos: -1, isTop: true, isInGlobal: false, display: true }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 3, pos: -1, isTop: true, isInGlobal: false, display: true }]\r\n  ]\r\n}\r\n\r\nfunction makeStartingBoard(): {startingDeck: Deck[],globalDeck: Deck} {\r\n  let returnDeck = []\r\n  let deck = getGlobalDeck()\r\n  for (let i = 0; i < 7; i++) {\r\n    let tempDeck = []\r\n    //tempDeck.push({ suit: '', value: '', numValue: -1, discovered: false, column: i, pos: -1, isTop: false, isInGlobal: false })\r\n    for (let j = 0; j <= i; j++) {\r\n      const rnd =Math.floor(Math.random() * deck.length)\r\n      let tmpCard = deck[rnd]\r\n      deck.splice(rnd, 1)\r\n      tmpCard.column = i\r\n      tmpCard.pos = j\r\n      tmpCard.isInGlobal = false\r\n      tmpCard.discovered = false\r\n      if (j === i) {\r\n        tmpCard.discovered = true\r\n      }\r\n      tempDeck.push(tmpCard)\r\n    }\r\n    returnDeck.push(tempDeck)\r\n  }\r\n  return {startingDeck: returnDeck, globalDeck: deck}\r\n}\r\nfunction getGlobalDeck(): Deck {\r\n  let returnDeck: Card[] = [];\r\n  for (let suit of suits) {\r\n    for (let i = 0; i < values.length; i++) {\r\n      returnDeck.push({ suit: suit, value: values[i], numValue: numValues[i], discovered: true, column: -1, pos: -1, isTop: false, isInGlobal: true, display: true });\r\n    }\r\n  }\r\n  return returnDeck\r\n}\r\n//CHECK MOVES\r\nexport function isValidStartingDeck(fromCard: Card, toCard: Card): boolean {\r\n  //props.card.suit === \"♥︎\" || props.card.suit === \"♦︎\" ? \"red\" : \"black\",\r\n  if(toCard.suit === '' && toCard.value === \"\" && toCard.pos === -1){\r\n    return true\r\n  }\r\n  else if(toCard.suit === \"♥︎\" || toCard.suit === \"♦︎\") {\r\n\r\n    if (fromCard.numValue + 1 === toCard.numValue && (fromCard.suit === \"♣︎\" || fromCard.suit === \"♠︎\")) {\r\n      return true\r\n    }\r\n  } else {\r\n\r\n    if (fromCard.numValue + 1 === toCard.numValue && (fromCard.suit === \"♥︎\" || fromCard.suit === \"♦︎\")) {\r\n      return true\r\n    }\r\n  }\r\n  console.log(\"INVALID MOVE\")\r\n  return false\r\n}\r\n\r\nexport function isValidTopDeck(fromCard: Card, toCard: Card):boolean {\r\n\r\n  if(toCard.suit === '' && toCard.value === '' && fromCard.value === \"A\"){\r\n    return true\r\n  } else {\r\n    console.log(\"First card must be A\")\r\n  }\r\n  if (fromCard.numValue === toCard.numValue + 1 && fromCard.suit === toCard.suit) {\r\n    return true\r\n  } else {\r\n    console.log(\"Selected card must be same suit and one value higher\")\r\n  }\r\n  console.log(\"INVALID MOVE\")\r\n  return false\r\n}\r\n\r\nexport function isValidFromSplit(fromCard: Card, toCard: Card):boolean{\r\n  if(toCard.isTop){\r\n    return isValidTopDeck(fromCard, toCard)\r\n  } else {\r\n    return isValidStartingDeck(fromCard, toCard)\r\n  }\r\n}\r\n\r\n\r\n\r\n","/* eslint-disable */\r\n\r\nimport { Grid } from '@material-ui/core'\r\nimport React, { useMemo, useState } from 'react'\r\nimport { Card, Deck } from '../Types'\r\nimport { PlayingCard } from './PlayingCard'\r\nimport CSS from \"csstype\";\r\n\r\nimport { Preview } from 'react-dnd-preview';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectDraggedCards } from '../Reducers/GameReducer';\r\n\r\ninterface PreviewObject {\r\n  itemType: string;\r\n  item: {\r\n    type: string;\r\n    card: Card;\r\n  };\r\n  style: CSS.Properties;\r\n}\r\n\r\nconst distBetweenCards = 43\r\n\r\nexport const PlayingCardPreview = React.memo(() => {\r\n\r\n  const draggedCards = useSelector(selectDraggedCards)\r\n  const memoizedPreview = useMemo(() => draggedCards, [draggedCards]);\r\n\r\n  const generatePreview = ({ itemType, item, style }: PreviewObject) => {\r\n    if (memoizedPreview.length > 0) {\r\n      return (\r\n        <>\r\n          {memoizedPreview.map((card, idx) => {\r\n            return (\r\n              <Grid item key={idx} style={{ ...style, position: \"absolute\", top: idx * distBetweenCards + \"px\", zIndex: 50 }}>\r\n                <PlayingCard\r\n                  card={card}\r\n                  turned={!card.discovered}\r\n                  canDrop={idx === memoizedPreview.length - 1}\r\n                  canDrag={card.discovered}\r\n                />\r\n              </Grid>\r\n            )\r\n          })}\r\n        </>\r\n      )\r\n    } else {\r\n      return (<></>)\r\n    }\r\n  }\r\n  return <Preview generator={generatePreview} />\r\n\r\n\r\n})","/* eslint-disable */\r\nimport React, { useCallback, useEffect, useState, useContext } from \"react\"\r\nimport \"./CSS/App.css\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { StartingBoard } from \"./Components/StartingBoard\"\r\nimport { DndProvider } from \"react-dnd\"\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\"\r\nimport TopRow from \"./Components/TopRow\"\r\nimport {\r\n  initGameBoard,\r\n  getTopRightDeck,\r\n  isValidStartingDeck,\r\n  isValidTopDeck,\r\n  isValidFromSplit,\r\n} from \"./gameLogic\"\r\nimport { Card, Deck } from \"./Types\"\r\nimport { PlayingCardPreview } from './Components/PlayingCardPreview'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { initializeGame } from './Actions/GameActions'\r\nimport { RootState, selectStartingDeck, selectSplitDeck, selectTopRightDeck } from \"./Reducers/GameReducer\"\r\n\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch()\r\n  const startingDeck = useSelector<RootState, Deck[]>(selectStartingDeck);\r\n  const splitDeck = useSelector<RootState, Deck[]>(selectSplitDeck);\r\n  const topRightDeck = useSelector<RootState, Deck[]>(selectTopRightDeck);\r\n\r\n\r\n  useEffect(() => {\r\n    let gameBoard = initGameBoard()\r\n    dispatch(initializeGame({ startingDeck: gameBoard.startingDeck, splitDeck: gameBoard.splitDeck, topRightDeck: getTopRightDeck(), draggedCards: [] }))\r\n    console.log(\"Board initialized\")\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <DndProvider backend={HTML5Backend}>\r\n        <PlayingCardPreview />\r\n\r\n        <Grid container spacing={8} direction=\"column\" style={{ margin: \"20px 18vw 20px 18vw\" }}>\r\n\r\n          <Grid item>\r\n            <TopRow topRightDeck={topRightDeck} splitDeck={splitDeck} />\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <StartingBoard startingDeck={startingDeck} />\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </DndProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { createStore } from 'redux'\r\nimport { GameReducer } from './Reducers/GameReducer'\r\nimport { Provider } from 'react-redux'\r\n//STORE\r\nconst store = createStore(GameReducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}