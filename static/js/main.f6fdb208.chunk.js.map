{"version":3,"sources":["Components/PlayingCard.tsx","Components/RecursiveStackedCards.tsx","Components/StackedCards.tsx","Components/TopRow.tsx","gameLogic.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["cardDimDiff","useStyles","makeStyles","card","display","width","cardWidth","height","borderRadius","padding","backgroundColor","border","cardbg","backgroundImage","backgroundRepeat","backgroundSize","cardtl","alignItems","cardbr","transform","cardValue","fontSize","cardSuit","red","color","black","bgImg","PlayingCard","React","memo","props","classes","isInGlobal","suit","useDrop","accept","drop","canDrop","isOver","useDrag","type","item","console","log","value","end","monitor","dropResult","getDropResult","fromCard","toCard","undefined","pos","column","isTop","moveCardToTopRight","toIdx","moveCardFromSplit","moveCard","drag","turned","Grid","ref","el","canDrag","container","direction","className","style","justify","children","RecursiveStackedCards","newCurr","currentCard","useCallback","cards","length","position","top","distBetweenCards","discovered","totalCards","StackedCards","startingDeck","map","idx","TopRow","useState","count","setCount","splitDeck","threeCards","setThreeCards","moveCardFromSplitCb","topRightDeck","onClick","updateSplitDeck","numValue","left","suits","values","numValues","initGameBoard","obj","returnDeck","deck","i","push","getGlobalDeck","tempDeck","j","rnd","Math","floor","random","tmpCard","splice","globalDeck","makeStartingBoard","newGlobalDeck","isValidStartingDeck","isValidTopDeck","App","tempTDeck","tempSDeck","setStartingDeck","setTopRightDeck","setSplitDeck","useEffect","gameBoard","DndProvider","backend","HTML5Backend","spacing","margin","isValidFromSplit","tempSplitDeck","arr1d","concat","cardsToPush","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6fdb208.chunk.js","sourcesContent":["/* eslint-disable */\r\n\r\nimport React, { useState, useContext, PropsWithChildren, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useDrag, useDrop, useDragDropManager } from 'react-dnd';\r\nimport { Deck, Card } from '../Types'\r\nconst cardDimDiff = 0.7191\r\nconst cardWidth = 100\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    display: \"flex\",\r\n    width: cardWidth + \"px\",\r\n    height: cardWidth / cardDimDiff + \"px\",\r\n    borderRadius: \"8px\",\r\n    padding: \"0px 4px 0px 4px\",\r\n    backgroundColor: \"white\",\r\n\r\n    border: \"3px solid black\",\r\n    //position: \"absolute\",\r\n\r\n  },\r\n  cardbg: {\r\n    display: \"flex\",\r\n    width: cardWidth - 6 + \"px\",\r\n    height: (cardWidth - 6) / cardDimDiff + \"px\",\r\n    borderRadius: \"8px\",\r\n    border: \"3px solid black\",\r\n\r\n\r\n\r\n    //Image styling\r\n    backgroundImage: `url(background2.png)`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\"\r\n  },\r\n\r\n  cardtl: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n\r\n  cardbr: {\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n    transform: `rotate(-180deg)`,\r\n  },\r\n  cardValue: {\r\n    fontSize: \"30px\",\r\n  },\r\n  cardSuit: {\r\n    fontSize: \"30px\",\r\n  },\r\n  red: {\r\n    color: \"red\",\r\n  },\r\n  black: {\r\n    color: \"black\",\r\n  },\r\n  bgImg: {\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\ninterface Props {\r\n  card: Card\r\n  turned: boolean\r\n  display: boolean\r\n  canDrop: boolean\r\n  canDrag: boolean\r\n  //Functions\r\n  moveCard?: (fromCard: Card, toCard: Card) => void\r\n  moveCardToTopRight?: (fromCard: Card, toIdx: number) => void\r\n  moveCardFromSplit?: (fromCard: Card, toCard: Card) => void\r\n\r\n  //Children\r\n  children?: any\r\n}\r\ninterface RefObject<T> {\r\n  readonly current: T | null\r\n}\r\n\r\nexport const PlayingCard = React.memo((props: Props) => {\r\n  const classes = useStyles()\r\n  if (props.card.isInGlobal && props.card.suit === \"♠︎\") {\r\n    //console.log(\"Rendering \" + props.card.suit + \" \" + props.card.value)\r\n  }\r\n  function attachDragNDrop(el: any) {\r\n    props.canDrop ? drop(el) : () => { }\r\n    props.canDrag ? drag(el) : () => { }\r\n  }\r\n\r\n\r\n  const [{ canDrop, isOver }, drop] = useDrop({\r\n    accept: \"Card\",\r\n    drop: () => {\r\n      return { props: props.card }\r\n    },\r\n  })\r\n\r\n  const [collected, drag, dragPreview] = useDrag({\r\n    type: \"Card\",\r\n    item: () => {\r\n\r\n      console.log(props.card.suit + \" \" + props.card.value)\r\n      return { card: props.card }\r\n\r\n    },\r\n    end: (item, monitor) => {\r\n      const dropResult: any = monitor.getDropResult();\r\n      if (item && dropResult) {\r\n        let fromCard: Card = item.card\r\n        let toCard: Card = dropResult.props\r\n        if (fromCard !== undefined && toCard !== undefined && (fromCard.pos !== toCard.pos || fromCard.column !== toCard.column)) {\r\n          console.log(fromCard)\r\n          console.log(toCard)\r\n          if (toCard.isTop && props.moveCardToTopRight !== undefined) {\r\n            let toIdx = toCard.column\r\n            console.log(`You dropped ${fromCard.value}, ${fromCard.suit} into topRightDeck ${toIdx}`)\r\n            props.moveCardToTopRight(fromCard, toIdx)\r\n\r\n          } else if (fromCard.isInGlobal && props.moveCardFromSplit !== undefined) {\r\n            console.log(`You dropped ${fromCard.value}, ${fromCard.suit} from splitDeck into ${toCard.value}, ${toCard.suit}`);\r\n            props.moveCardFromSplit(fromCard, toCard)\r\n          } else if (props.moveCard !== undefined && !toCard.isTop) {\r\n            //moveCard\r\n            console.log(`You dropped ${fromCard.value}, ${fromCard.suit} into ${toCard.value}, ${toCard.suit}`);\r\n            props.moveCard(fromCard, toCard)\r\n          }\r\n\r\n        }\r\n\r\n        else {\r\n          console.log(\"Something is undefined in useDrag or Cant drop a card on\")\r\n          console.log(fromCard)\r\n          console.log(toCard)\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n\r\n\r\n  if (props.turned === false || props.card.suit === '') {\r\n    return (\r\n      <>\r\n\r\n        <Grid\r\n          ref={attachDragNDrop}\r\n          container\r\n          direction=\"row\"\r\n          className={classes.card}\r\n          style={{\r\n            color: props.card.suit === \"♥︎\" || props.card.suit === \"♦︎\" ? \"red\" : \"black\",\r\n            border: props.card.suit === '' ? \"2px solid rgba(0, 0, 0, 0.3)\" : \"3px solid rgba(0, 0, 0)\",\r\n            display: !props.display ? \"none\" : \"\",\r\n\r\n\r\n          }}\r\n\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            className={classes.cardtl}\r\n          >\r\n            <Grid item className={classes.cardValue}>\r\n              {props.card.value}\r\n            </Grid>\r\n            <Grid item className={classes.cardSuit}>\r\n              {props.card.suit}\r\n            </Grid>\r\n          </Grid>\r\n\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            className={classes.cardbr}\r\n          >\r\n            <Grid item className={classes.cardValue}>\r\n              {props.card.value}\r\n            </Grid>\r\n            <Grid item className={classes.cardSuit}>\r\n              {props.card.suit}\r\n            </Grid>\r\n          </Grid>\r\n\r\n\r\n        </Grid>\r\n        {props.children}\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Grid container style={{\r\n        }}>\r\n          <div className={classes.cardbg} />\r\n        </Grid>\r\n        {props.children}\r\n      </>\r\n    );\r\n  }\r\n})\r\n\r\n//False = Rerender\r\n//True = Not rerender","/* eslint-disable */\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React, { useCallback, useContext, useState } from \"react\";\r\nimport { Deck, Card } from '../Types'\r\nimport { PlayingCard } from \"./PlayingCard\";\r\n\r\n\r\n\r\ninterface Props {\r\n  cards: Card[];\r\n\r\n  column: number;\r\n  totalCards: number;\r\n  currentCard: number;\r\n  moveCard: (fromCard: Card, toCard: Card) => void\r\n  moveCardToTopRight: (fromCard: Card, toIdx: number) => void\r\n\r\n\r\n}\r\n\r\nexport const RecursiveStackedCards = React.memo((props: Props): any => {\r\n\r\n  let newCurr = props.currentCard + 1\r\n  const distBetweenCards = 43\r\n\r\n\r\n  const moveCardCb = useCallback((fromCard: Card, toCard: Card) => {\r\n    props.moveCard(fromCard, toCard)\r\n  }, [props.cards])\r\n\r\n  const moveCardToTopRightCb = useCallback((fromCard: Card, toIdx: number) => {\r\n    props.moveCardToTopRight(fromCard, toIdx)\r\n  }, [props.cards])\r\n\r\n\r\n\r\n  if (props.currentCard < (props.cards.length - 1)) {\r\n    return (\r\n      <Grid item style={{\r\n        position: props.currentCard > 0 ? \"absolute\" : \"static\",\r\n        top: props.currentCard === 1 ? \"0px\" : distBetweenCards + \"px\",\r\n\r\n      }}>\r\n\r\n        <PlayingCard card={props.cards[props.currentCard]} turned={!props.cards[props.currentCard].discovered} display={true} canDrop={false} canDrag={props.cards[props.currentCard].discovered} moveCard={props.moveCard} moveCardToTopRight={props.moveCardToTopRight}>\r\n          <RecursiveStackedCards cards={props.cards} column={props.column} totalCards={props.totalCards} currentCard={newCurr} moveCard={props.moveCard} moveCardToTopRight={props.moveCardToTopRight} />\r\n        </PlayingCard>\r\n      </Grid>\r\n    )\r\n  } else {\r\n\r\n    return (\r\n      <Grid item style={{\r\n        position: props.currentCard > 0 ? \"absolute\" : \"static\",\r\n        top: props.currentCard === 1 ? \"0px\" : distBetweenCards + \"px\"\r\n      }}>\r\n        <PlayingCard card={props.cards[props.currentCard]} turned={false} display={true} canDrop={true} canDrag={props.cards[props.currentCard].discovered} moveCard={props.moveCard} moveCardToTopRight={props.moveCardToTopRight} />\r\n      </Grid>\r\n    )\r\n  }\r\n  /*\r\n} else {\r\n  //Only render cards that are not beeing dragged\r\n  let tmpCards = [...cards].splice(0, curr)\r\n  //let tmpCurr = tmpCards.length - curr\r\n\r\n  return (\r\n    <Grid item style={{\r\n      position: curr > 0 ? \"absolute\" : \"static\",\r\n      top: \"0px\"\r\n    }}>\r\n      <PlayingCard card={tmpCards[0]} turned={false} display={false} canDrop={true} canDrag={false} />\r\n    </Grid>\r\n  )\r\n\r\n}\r\n*/\r\n})","/* eslint-disable */\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { Deck, Card } from '../Types'\r\nimport { RecursiveStackedCards } from \"./RecursiveStackedCards\";\r\n\r\n\r\ninterface Props {\r\n  startingDeck: Deck[]\r\n  moveCard: (fromCard: Card, toCard: Card) => void\r\n  moveCardToTopRight: (fromCard: Card, toIdx: number) => void\r\n}\r\n\r\nexport const StackedCards = (props: Props) => {\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n    <Grid container direction=\"row\" alignItems=\"flex-start\" justify=\"space-between\"  >\r\n      {props.startingDeck.map((cards, idx) => {\r\n        return (\r\n\r\n          <Grid item key={idx} style={{ position: \"relative\" }}>\r\n            {cards.length > 0 ? <RecursiveStackedCards cards={cards} column={idx} totalCards={cards.length} currentCard={0} moveCard={props.moveCard} moveCardToTopRight={props.moveCardToTopRight} /> : ''}\r\n          </Grid>\r\n        )\r\n      })}\r\n\r\n    </Grid>\r\n\r\n  )\r\n}\r\n\r\n","/* eslint-disable */\r\nimport { Grid } from \"@material-ui/core\"\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\"\r\n\r\nimport { Deck, Card } from \"../Types\"\r\nimport { PlayingCard } from \"./PlayingCard\"\r\n\r\ninterface Props {\r\n  topRightDeck: Deck[]\r\n  splitDeck: Deck[]\r\n  moveCardFromSplit: (fromCard: Card, toCard: Card) => void\r\n  updateSplitDeck: () => void\r\n}\r\n\r\nexport function TopRow(props: Props) {\r\n  const [count, setCount] = useState<number>(-1)\r\n  const [threeCards, setThreeCards] = useState(() =>\r\n    count > -1 ? props.splitDeck[count] : []\r\n  )\r\n\r\n  const moveCardFromSplitCb = useCallback(\r\n    (fromCard: Card, toCard: Card) => {\r\n      props.moveCardFromSplit(fromCard, toCard)\r\n    },\r\n    [props.topRightDeck, props.splitDeck]\r\n  )\r\n\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"space-between\">\r\n      <Grid\r\n        item\r\n        onClick={() => {\r\n          console.log(count)\r\n          if (count >= props.splitDeck.length - 1) {\r\n            props.updateSplitDeck()\r\n            setCount(-1)\r\n            setThreeCards([])\r\n          } else {\r\n            console.log(props.splitDeck[count + 1])\r\n            setThreeCards(props.splitDeck[count + 1])\r\n            setCount(count + 1)\r\n          }\r\n        }}\r\n      >\r\n        <PlayingCard\r\n          card={{\r\n            suit: \"bg\",\r\n            value: \"\",\r\n            numValue: -1,\r\n            discovered: false,\r\n            column: -1,\r\n            pos: -1,\r\n            isTop: false,\r\n            isInGlobal: false,\r\n          }}\r\n          turned={true}\r\n          display={true}\r\n          canDrop={false}\r\n          canDrag={false}\r\n        />\r\n      </Grid>\r\n      <Grid item style={{ width: \"100px\" }}>\r\n        <Grid container direction=\"row\" style={{ position: \"relative\" }}>\r\n          {threeCards.map((card, idx) => {\r\n            return (\r\n              <Grid\r\n                item\r\n                key={idx}\r\n                style={{\r\n                  position: \"absolute\",\r\n                  left: idx * 50 + \"px\",\r\n                }}\r\n              >\r\n                <PlayingCard\r\n                  card={card}\r\n                  turned={false}\r\n                  display={true}\r\n                  canDrop={false}\r\n                  canDrag={idx === threeCards.length - 1 ? true : false}\r\n                  moveCardFromSplit={moveCardFromSplitCb}\r\n                />\r\n              </Grid>\r\n            )\r\n          })}\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item style={{ width: \"100px\" }}></Grid>\r\n      {props.topRightDeck.map((card, idx) => {\r\n        return (\r\n          <Grid item key={idx}>\r\n            <PlayingCard\r\n              card={card[card.length - 1]}\r\n              turned={false}\r\n              display={true}\r\n              canDrop={true}\r\n              canDrag={false}\r\n            />\r\n          </Grid>\r\n        )\r\n      })}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default TopRow\r\n","/* eslint-disable */\r\n\r\nimport {Card, Deck} from './Types'\r\n\r\n\r\nconst suits = [\"♠︎\", \"♥︎\", \"♣︎\", \"♦︎\"];\r\nconst values = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\",];\r\nconst numValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,];\r\n\r\n\r\n\r\n\r\nexport function initGameBoard(): {splitDeck: Deck[], startingDeck: Deck[]} {\r\n  let obj = makeStartingBoard()\r\n  let newGlobalDeck: Deck[] = []\r\n  while (obj.globalDeck.length) {\r\n    if ((obj.globalDeck.length - 3) > 0) {\r\n      newGlobalDeck.push(obj.globalDeck.splice(obj.globalDeck.length - 3, 3))\r\n    } else {\r\n      newGlobalDeck.push(obj.globalDeck.splice(0, obj.globalDeck.length))\r\n    }\r\n  }\r\n  return {splitDeck: newGlobalDeck, startingDeck: obj.startingDeck}\r\n}\r\n\r\nexport function getTopRightDeck() : Deck[] {\r\n  return [\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 0, pos: -1, isTop: true, isInGlobal: false }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 1, pos: -1, isTop: true, isInGlobal: false }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 2, pos: -1, isTop: true, isInGlobal: false }],\r\n    [{ suit: '', value: '', numValue: -1, discovered: false, column: 3, pos: -1, isTop: true, isInGlobal: false }]\r\n  ]\r\n}\r\n\r\nfunction makeStartingBoard(): {startingDeck: Deck[],globalDeck: Deck} {\r\n  let returnDeck = []\r\n  let deck = getGlobalDeck()\r\n  for (let i = 0; i < 7; i++) {\r\n    let tempDeck = []\r\n    tempDeck.push({ suit: '', value: '', numValue: -1, discovered: false, column: i, pos: -1, isTop: false, isInGlobal: false })\r\n    for (let j = 0; j <= i; j++) {\r\n      const rnd =Math.floor(Math.random() * deck.length)\r\n      let tmpCard = deck[rnd]\r\n      deck.splice(rnd, 1)\r\n      tmpCard.column = i\r\n      tmpCard.pos = j\r\n      tmpCard.isInGlobal = false\r\n      tmpCard.discovered = false\r\n      if (j === i) {\r\n        tmpCard.discovered = true\r\n      }\r\n      tempDeck.push(tmpCard)\r\n    }\r\n    returnDeck.push(tempDeck)\r\n  }\r\n  return {startingDeck: returnDeck, globalDeck: deck}\r\n}\r\nfunction getGlobalDeck(): Deck {\r\n  let returnDeck: Card[] = [];\r\n  for (let suit of suits) {\r\n    for (let i = 0; i < values.length; i++) {\r\n      returnDeck.push({ suit: suit, value: values[i], numValue: numValues[i], discovered: true, column: -1, pos: -1, isTop: false, isInGlobal: true });\r\n    }\r\n  }\r\n  return returnDeck\r\n}\r\n//CHECK MOVES\r\nexport function isValidStartingDeck(fromCard: Card, toCard: Card): boolean {\r\n  //props.card.suit === \"♥︎\" || props.card.suit === \"♦︎\" ? \"red\" : \"black\",\r\n  if(toCard.suit === '' && toCard.value === \"\" && toCard.pos === -1){\r\n    return true\r\n  }\r\n  else if(toCard.suit === \"♥︎\" || toCard.suit === \"♦︎\") {\r\n\r\n    if (fromCard.numValue + 1 === toCard.numValue && (fromCard.suit === \"♣︎\" || fromCard.suit === \"♠︎\")) {\r\n      return true\r\n    }\r\n  } else {\r\n\r\n    if (fromCard.numValue + 1 === toCard.numValue && (fromCard.suit === \"♥︎\" || fromCard.suit === \"♦︎\")) {\r\n      return true\r\n    }\r\n  }\r\n  console.log(\"INVALID MOVE\")\r\n  return false\r\n}\r\n\r\nexport function isValidTopDeck(fromCard: Card, toCard: Card):boolean {\r\n\r\n  if(toCard.suit === '' && toCard.value === '' && fromCard.value === \"A\"){\r\n    return true\r\n  } else {\r\n    console.log(\"First card must be A\")\r\n  }\r\n  if (fromCard.numValue === toCard.numValue + 1 && fromCard.suit === toCard.suit) {\r\n    return true\r\n  } else {\r\n    console.log(\"Selected card must be same suit and one value higher\")\r\n  }\r\n  console.log(\"INVALID MOVE\")\r\n  return false\r\n}\r\n\r\nexport function isValidFromSplit(fromCard: Card, toCard: Card):boolean{\r\n  if(toCard.isTop){\r\n    return isValidTopDeck(fromCard, toCard)\r\n  } else {\r\n    return isValidStartingDeck(fromCard, toCard)\r\n  }\r\n}\r\n\r\n\r\nexport function moveCard(fromCard: Card, toCard: Card, startingDeck: Deck[]): Deck[]{\r\n  if (fromCard !== undefined && toCard !== undefined/* && isValidStartingDeck(fromCard, toCard)*/) {\r\n    let tempSDeck = [...startingDeck]\r\n    let cardsToPush = tempSDeck[fromCard.column].splice(fromCard.pos + 1, (tempSDeck[fromCard.column].length - 1))\r\n      if (tempSDeck[fromCard.column].length > 1) {\r\n        tempSDeck[fromCard.column][tempSDeck[fromCard.column].length - 1].discovered = true\r\n      }\r\n      for (let i = 0; i < cardsToPush.length; i++) {\r\n        cardsToPush[i].column = toCard.column\r\n        cardsToPush[i].pos = toCard.pos + 1\r\n        tempSDeck[toCard.column].push(cardsToPush[i])\r\n      }\r\n    return tempSDeck\r\n  } else {\r\n    console.log(\"Something undefined or illegeal move in moveCard\")\r\n    return startingDeck\r\n  }\r\n}\r\n\r\nexport const moveCardToTopLeft = (fromCard: Card, toIdx: number, startingDeck: Deck[], topLeftDeck: Deck[]): {newStartingDeck: Deck[], newTopRightDeck: Deck[]} => {\r\n  if (fromCard !== undefined /*&& isValidTopDeck(fromCard, topDeck[toIdx][topDeck[toIdx].length - 1])*/ && startingDeck[fromCard.column].length - 2 === fromCard.pos) {\r\n    let tempSDeck = [...startingDeck]\r\n    let tempTDeck = [...topLeftDeck]\r\n\r\n\r\n    fromCard.isTop = true\r\n    tempSDeck[fromCard.column].splice(fromCard.pos + 1, 1)\r\n    tempTDeck[toIdx].push(fromCard)\r\n    if (tempSDeck[fromCard.column].length > 1) {\r\n      tempSDeck[fromCard.column][tempSDeck[fromCard.column].length - 1].discovered = true\r\n    }\r\n    return {newStartingDeck: tempSDeck, newTopRightDeck: tempTDeck}\r\n  } else {\r\n    console.log(\"Something undefined or illegeal movein moveCardTopRow\")\r\n    return {newStartingDeck: startingDeck, newTopRightDeck: topLeftDeck}\r\n\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport const moveCardFromSplit = (fromCard: Card, toCard: Card, topRightDeck: Deck[], startingDeck: Deck[], splitDeck: Deck[]): {newTopRightDeck: Deck[], newStartingDeck: Deck[], newSplitDeck: Deck[]} => {\r\n  if (fromCard !== undefined && toCard !== undefined /*&& isValidStartingDeck(fromCard, toCard)*/) {\r\n    let tempTDeck = [...topRightDeck]\r\n    let tempSDeck = [...startingDeck]\r\n    let tempSplitDeck = [...splitDeck]\r\n    for(let i = 0; i < tempSplitDeck.length; i++){\r\n      if(fromCard === tempSplitDeck[i][tempSplitDeck[i].length - 1]){\r\n        tempSplitDeck[i].splice(-1, 1)\r\n      }\r\n    }\r\n    \r\n\r\n    fromCard.column = toCard.column\r\n    fromCard.pos = toCard.pos + 1\r\n    \r\n    if (toCard.isTop) {\r\n      tempTDeck[toCard.column].push(fromCard)\r\n    } else {\r\n      console.log(toCard.column)\r\n      console.log(tempSDeck)\r\n      fromCard.isTop = false\r\n      tempSDeck[toCard.column].push(fromCard)\r\n    }\r\n    return {newTopRightDeck: tempTDeck, newStartingDeck: tempSDeck, newSplitDeck: tempSplitDeck}\r\n  } else {\r\n    console.log(\"Something undefined or illegeal move in moveCardFromTop\")\r\n    return {newTopRightDeck: topRightDeck, newStartingDeck: startingDeck, newSplitDeck: splitDeck}\r\n  }\r\n}\r\n","/* eslint-disable */\r\nimport React, { useCallback, useEffect, useState, useContext } from \"react\"\r\nimport \"./CSS/App.css\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { StackedCards } from \"./Components/StackedCards\"\r\nimport { DndProvider } from \"react-dnd\"\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\"\r\nimport TopRow from \"./Components/TopRow\"\r\nimport {\r\n  initGameBoard,\r\n  getTopRightDeck,\r\n  isValidStartingDeck,\r\n  isValidTopDeck,\r\n  isValidFromSplit,\r\n} from \"./gameLogic\"\r\nimport { Card, Deck } from \"./Types\"\r\n\r\nfunction App() {\r\n  function moveCard(fromCard: Card, toCard: Card): void {\r\n    if (\r\n      fromCard !== undefined &&\r\n      toCard !== undefined &&\r\n      isValidStartingDeck(fromCard, toCard)\r\n    ) {\r\n      let tempSDeck = [...startingDeck]\r\n      let cardsToPush = tempSDeck[fromCard.column].splice(\r\n        fromCard.pos + 1,\r\n        tempSDeck[fromCard.column].length - 1\r\n      )\r\n      if (tempSDeck[fromCard.column].length > 1) {\r\n        tempSDeck[fromCard.column][\r\n          tempSDeck[fromCard.column].length - 1\r\n        ].discovered = true\r\n      }\r\n      for (let i = 0; i < cardsToPush.length; i++) {\r\n        cardsToPush[i].column = toCard.column\r\n        cardsToPush[i].pos = tempSDeck[toCard.column].length - 1\r\n        tempSDeck[toCard.column].push(cardsToPush[i])\r\n      }\r\n      setStartingDeck(tempSDeck)\r\n    } else {\r\n      console.log(\"Something undefined or illegeal move in moveCard\")\r\n    }\r\n  }\r\n  const moveCardToTopRight = (fromCard: Card, toIdx: number): void => {\r\n    let tempTDeck = [...topRightDeck]\r\n    let tempSDeck = [...startingDeck]\r\n\r\n    if (\r\n      fromCard !== undefined &&\r\n      isValidTopDeck(fromCard, tempTDeck[toIdx][tempTDeck[toIdx].length - 1]) &&\r\n      tempSDeck[fromCard.column].length - 2 === fromCard.pos\r\n    ) {\r\n      tempSDeck[fromCard.column].splice(fromCard.pos + 1, 1)\r\n      if (tempSDeck[fromCard.column].length > 1) {\r\n        tempSDeck[fromCard.column][\r\n          tempSDeck[fromCard.column].length - 1\r\n        ].discovered = true\r\n      }\r\n      fromCard.isTop = true\r\n      fromCard.column = toIdx\r\n      tempTDeck[toIdx].push(fromCard)\r\n      setStartingDeck(tempSDeck)\r\n      setTopRightDeck(tempTDeck)\r\n    } else {\r\n      console.log(\"Something undefined or illegeal movein moveCardToTopRow\")\r\n    }\r\n  }\r\n\r\n  const moveCardFromSplit = (fromCard: Card, toCard: Card): void => {\r\n    if (\r\n      fromCard !== undefined &&\r\n      toCard !== undefined &&\r\n      isValidFromSplit(fromCard, toCard)\r\n    ) {\r\n      let tempSplitDeck = [...splitDeck]\r\n\r\n      for (let i = 0; i < tempSplitDeck.length; i++) {\r\n        //Bytt til indexof?\r\n        if (fromCard === tempSplitDeck[i][tempSplitDeck[i].length - 1]) {\r\n          tempSplitDeck[i].splice(-1, 1)\r\n        }\r\n      }\r\n\r\n      if (toCard.isTop) {\r\n        moveCardToTopRight(fromCard, toCard.column)\r\n        /*\r\n        let tempTDeck = [...topRightDeck]\r\n        tempTDeck[toCard.column].push(fromCard)\r\n        setTopRightDeck(tempTDeck)\r\n        */\r\n      } else {\r\n        fromCard.column = toCard.column\r\n        fromCard.pos = toCard.pos + 1\r\n        fromCard.isInGlobal = false\r\n        let tempSDeck = [...startingDeck]\r\n        tempSDeck[toCard.column].push(fromCard)\r\n        setStartingDeck(tempSDeck)\r\n      }\r\n      setSplitDeck(tempSplitDeck)\r\n    } else {\r\n      console.log(\"Something undefined or illegeal move in moveCardFromTop\")\r\n    }\r\n  }\r\n\r\n  function updateSplitDeck() {\r\n    console.log(\"Resetting\")\r\n    let tempSplitDeck = [...splitDeck]\r\n    let arr1d: Deck = []\r\n    for (let i = 0; i < tempSplitDeck.length; i++) {\r\n      arr1d = tempSplitDeck[i].concat(arr1d)\r\n    }\r\n    tempSplitDeck = []\r\n    while (arr1d.length) {\r\n      if (arr1d.length - 3 > 0) {\r\n        tempSplitDeck.push(arr1d.splice(arr1d.length - 3, 3))\r\n      } else {\r\n        tempSplitDeck.push(arr1d.splice(0, arr1d.length))\r\n      }\r\n    }\r\n    console.log(tempSplitDeck)\r\n    setSplitDeck(tempSplitDeck)\r\n  }\r\n\r\n  const [startingDeck, setStartingDeck] = useState<Deck[]>([])\r\n  const [splitDeck, setSplitDeck] = useState<Deck[]>([])\r\n  const [topRightDeck, setTopRightDeck] = useState<Deck[]>([])\r\n\r\n  useEffect(() => {\r\n    let gameBoard = initGameBoard()\r\n    setStartingDeck(gameBoard.startingDeck)\r\n    setSplitDeck(gameBoard.splitDeck)\r\n    setTopRightDeck(getTopRightDeck())\r\n    console.log(\"Board initialized\")\r\n  }, [])\r\n\r\n  console.log(startingDeck)\r\n  console.log(splitDeck)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <DndProvider backend={HTML5Backend}>\r\n        <Grid\r\n          container\r\n          spacing={8}\r\n          direction=\"column\"\r\n          style={{ margin: \"20px 18vw 20px 18vw\" }}\r\n        >\r\n          <Grid item>\r\n            <TopRow\r\n              topRightDeck={topRightDeck}\r\n              splitDeck={splitDeck}\r\n              moveCardFromSplit={moveCardFromSplit}\r\n              updateSplitDeck={updateSplitDeck}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <StackedCards\r\n              startingDeck={startingDeck}\r\n              moveCard={moveCard}\r\n              moveCardToTopRight={moveCardToTopRight}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </DndProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}